<?php

namespace Tellaw\LeadsFactoryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * LeadsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LeadsRepository extends EntityRepository
{

	/**
	 * Returns a paginated list of leads
	 *
	 * @param int $page
	 * @param int $limit
	 * @param null $args
	 *
	 * @return Paginator
	 */
	public function getList($page=1, $limit=25, $keyword='',  $args=null )
	{


		$dql = $this->getSqlFilterQuery($args);

		$query = $this->getEntityManager()
		              ->createQuery($dql)
		              ->setFirstResult(($page-1) * $limit)
		              ->setMaxResults($limit);

		return new Paginator($query);
	}

	/**
	 * Returns an iterable query result of leads with no pagination
	 *
	 * @param array $args
	 *
	 * @return \Doctrine\ORM\Internal\Hydration\IterableResult
	 */
	public function getIterableList($args)
	{
		$dql = $this->getSqlFilterQuery($args);
		$results = $this->getEntityManager()
		                ->createQuery($dql)
						->iterate();

		return $results;
	}

	/**
	 * Return an array of leads based on parameters
	 *
	 * @param array $args
	 *
	 * @return array
	 */
	public function getLeads($args)
	{
		$dql = $this->getSqlFilterQuery($args);
		$results = $this->getEntityManager()->createQuery($dql)->getResult();

		return $results;
	}

	/**
	 * Builds the dql query to filter the leads
	 *
	 * @param array $args
	 *
	 * @return string
	 */
	protected function getSqlFilterQuery($args)
	{

		$dql = 'SELECT l FROM TellawLeadsFactoryBundle:Leads l JOIN l.form f';

		if(!empty($args)) {
			$dql .= ' WHERE 1=1';

            if(!empty($args['user']) && $args['user']->getScope() != null){
                $dql .= " AND f.scope = ".$args['user']->getScope()->getId();
            }

            if(!empty($args[0]['form'])){
				$dql .= " AND l.form='{$args[0]['form']}'";
			}

			/*
			if(!empty($args[0]['scope'])){
				$dql .= " AND f.scope='{$args['scope']}'";
			}*/

			if(!empty($args[0]['lastname'])){
				$dql .= " AND l.lastname LIKE '%{$args[0]['lastname']}%'";
			}

			if(!empty($args[0]['firstname'])){
				$dql .= " AND l.firstname LIKE '%{$args[0]['firstname']}%'";
			}

			if(!empty($args[0]['email'])){
				$dql .= " AND l.email LIKE '%{$args[0]['email']}%'";
			}

			if(!empty($args[0]['keyword'])){
				$keywords = explode(' ', $args[0]['keyword']);
				foreach($keywords as $key => $keyword){
					//if($key>0)
					$dql .= ' AND';
					$dql .= " l.data LIKE '%".$keyword."%'";
				}
			}

			if(!empty($args[0]['datemin'])){
				$datemin = is_object($args[0]['datemin']) ? $args[0]['datemin']->format('Y-m-d') : $args[0]['datemin'];
				$dql .= " AND l.createdAt >= '$datemin'";
			}

			if(!empty($args[0]['datemax'])){
				$datemax = is_object($args[0]['datemax']) ? $args[0]['datemax']->format('Y-m-d') : $args[0]['datemax'];
				$dql .= " AND l.createdAt <= '$datemax'";
			}
		}

		$dql .= " ORDER BY l.createdAt DESC";

		return $dql;
	}
}

