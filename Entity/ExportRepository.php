<?php

namespace Tellaw\LeadsFactoryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Validator\Constraints\DateTime;
use Tellaw\LeadsFactoryBundle\Utils\ExportUtils;

/**
 * ExportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExportRepository extends EntityRepository
{

    /**
     * @param $keyword
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    public function getForLeadID($leadId)
    {

        $dql = 'SELECT e FROM TellawLeadsFactoryBundle:Export e JOIN e.form f';
        $dql .= " WHERE e.lead = :id";
        $dql .= ' ORDER BY e.created_at DESC';

        $query = $this->getEntityManager()
            ->createQuery($dql)
            ->setParameters(array("id" => $leadId));

        return $query->execute();
    }

    /**
     * @param $keyword
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    public function getList($page = 1, $limit = 10, $keyword = '', $params = array())
    {

        //Get User scope
        $user = $params["user"];

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e');
        $qb->from('TellawLeadsFactoryBundle:Export', 'e');
        $qb->join('e.form', 'f');

        if ($user->getScope() != null) {
            $qb->where('f.scope = :scope');
            $qb->setParameter('scope', $user->getScope());
        }

        if (!empty($keyword)) {

            $keywords = explode(' ', $keyword);
            foreach ($keywords as $key => $keyword) {
                $qb->orWhere("e.method LIKE :keyword");
                $qb->orWhere("e.lead = :keyword");
                $qb->orWhere("e.id = :keyword");
                $qb->orWhere("e.log LIKE :keyword");
                $qb->setParameter('keyword', '%' . $keyword . '%');
            }
        }

        if (array_key_exists("statuses", $params) && count($params["statuses"]) > 0) {
            $qb->where("e.status IN ( :statuses )");
            $qb->setParameter('statuses', $params["statuses"]);
        }

        $qb->orderBy('e.created_at', 'DESC');

        $qb->setFirstResult(($page - 1) * $limit);
        $qb->setMaxResults($limit);

        return new Paginator($qb);

    }

    public function findByEmailWaitingValidation($email)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e')
            ->from('TellawLeadsFactoryBundle:Export', 'e')
            ->innerJoin('TellawLeadsFactoryBundle:Leads', 'l', 'WITH', 'e.lead = l.id')
            ->where('l.email = :email')
            ->andWhere('e.status = :status')
            ->setParameter('email', $email)
            ->setParameter('status', ExportUtils::EXPORT_EMAIL_NOT_CONFIRMED);

        return $qb->getQuery()->getResult();
    }

    public function findByStatus($status, $date = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e,s,f,l')
            ->from('TellawLeadsFactoryBundle:Export', 'e')
            ->innerJoin('TellawLeadsFactoryBundle:Form', 'f', 'WITH', 'f.id = e.form')
            ->innerJoin('TellawLeadsFactoryBundle:Leads', 'l', 'WITH', 'l.id = e.lead')
            ->innerJoin('TellawLeadsFactoryBundle:Scope', 's', 'WITH', 's.id = f.scope')
            ->where('e.status = :status')
            ->setParameter('status', $status);

        if ($date) {
            $qb->andWhere('e.created_at >= :date')
                ->setParameter('date', $date->format('Y-m-d h:i:s'));
        }

        return $qb->getQuery()->getScalarResult();
    }

    public function resetFailedExports($date = null, $exports = array())
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->update('TellawLeadsFactoryBundle:Export', 'e')
            ->set('e.status', 0)
            ->where('e.status = 3')
            ->andWhere('e.id IN (:exports)')
            ->setParameter('exports', $exports);
        if ($date) {
            $qb->andWhere('e.created_at >= :date')
                ->setParameter('date', $date->format('Y-m-d h:i:s'));
        }

        return $qb->getQuery()->execute();
    }

}
