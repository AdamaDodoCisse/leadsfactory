<?php

namespace Tellaw\LeadsFactoryBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Validator\Constraints\DateTime;
use Tellaw\LeadsFactoryBundle\Utils\ExportUtils;

/**
 * ExportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ExportRepository extends EntityRepository
{

    /**
     * @param $keyword
     * @param int $page
     * @param int $limit
     * @return Paginator
     */
    public function getList($page=1, $limit=10, $keyword='', $params=array())
    {

        //Get User scope
        $user = $params["user"];

        $dql = 'SELECT e FROM TellawLeadsFactoryBundle:Export e JOIN e.form f';

        if ($user->getScope() != null) {
            $where = ' WHERE f.scope = '.$user->getScope()->getId();
        }else {
            $where = " WHERE 1=1";
        }

        if(!empty($keyword)){
            $where = ' WHERE';
            $keywords = explode(' ', $keyword);
            foreach($keywords as $key => $keyword){
                if($key>0)
                    $where .= ' AND';
                $where .= " e.method LIKE '%".$keyword."%'";
                $where .= " OR e.lead = '".$keyword."'";
                $where .= " OR e.id = '".$keyword."'";
                $where .= " OR e.log LIKE '%".$keyword."%'";
            }

        }

        $dql .= $where;

        if ( array_key_exists("statuses", $params) && count ($params["statuses"])> 0) {
            $dql .= " AND e.status IN ('".implode (',',$params["statuses"])."')";
        }

	    $dql .= ' ORDER BY e.created_at DESC';

        $query = $this->getEntityManager()
            ->createQuery($dql)
            ->setFirstResult(($page-1) * $limit)
            ->setMaxResults($limit);

        return new Paginator($query);
    }

    public function findByEmailWaitingValidation($email)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e')
            ->from('TellawLeadsFactoryBundle:Export', 'e')
            ->innerJoin('TellawLeadsFactoryBundle:Leads', 'l', 'WITH', 'e.lead = l.id')
            ->where('l.email = :email')
            ->andWhere('e.status = :status')
            ->setParameter('email', $email)
            ->setParameter('status', ExportUtils::EXPORT_EMAIL_NOT_CONFIRMED)
        ;
        return $qb->getQuery()->getResult();
    }

    public function findByStatus($status, $date = null) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('e,s,f,l')
            ->from('TellawLeadsFactoryBundle:Export', 'e')
            ->innerJoin('TellawLeadsFactoryBundle:Form', 'f', 'WITH', 'f.id = e.form')
            ->innerJoin('TellawLeadsFactoryBundle:Leads', 'l', 'WITH', 'l.id = e.lead')
            ->innerJoin('TellawLeadsFactoryBundle:Scope', 's', 'WITH', 's.id = f.scope')
            ->where('e.status = :status')
            ->setParameter('status', $status);

        if ($date) {
            $qb ->andWhere('e.created_at >= :date')
                ->setParameter('date', $date->format('Y-m-d h:i:s'));
        }

        return $qb->getQuery()->getScalarResult();
    }

    public function resetFailedExports($date = null, $exports = array()) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->update('TellawLeadsFactoryBundle:Export', 'e')
            ->set('e.status', 0)
            ->where('e.status = 3')
            ->andWhere('e.id IN (:exports)')
            ->setParameter('exports', $exports);
        if ($date) {
                $qb ->andWhere('e.created_at >= :date')
                    ->setParameter('date', $date->format('Y-m-d h:i:s'));
            }
        return $qb->getQuery()->execute();
    }

}
