<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class CoreManager implements ContainerAwareInterface { private static $v1 = 3.14; private static $v2 = 5; private static $v3 = 2; private static $v6 = 2.5; private static $v4 = 235; private static $v5 = 520; private static $v7 = 326; private $logger; protected $container; public function setContainer(ContainerInterface $sp2c896e = null) { $this->container = $sp2c896e; $this->logger = $this->container->get('logger'); } protected function getContainer() { return $this->container; } public static function getLicenceInfos() { if (file_exists('../licence/licence.php')) { $sp5b6186 = implode('', file('../licence/licence.php')); $spcc3eb5 = explode('|', $sp5b6186); $sp4f99af = ($spcc3eb5[2] + CoreManager::$v2) / CoreManager::$v1; $sp6569aa = $spcc3eb5[3]; $sp1a3556 = $spcc3eb5[4] * (CoreManager::$v2 / CoreManager::$v3) / (CoreManager::$v7 / 2); $spd708e3 = ($spcc3eb5[5] + CoreManager::$v5) / CoreManager::$v4; $spaa9143 = $spcc3eb5[6]; $spbf89aa = $spcc3eb5[9]; $spcdb2a6 = $spcc3eb5[7]; $sp5d773f = $spcc3eb5[8]; $sp5b6186 = $spcc3eb5[1]; $sp1193e4 = md5($spcc3eb5[2] . ':' . $spcc3eb5[3] . ':' . $spcc3eb5[4] . ':' . $spcc3eb5[5] . ':' . $spcc3eb5[6] . ':' . $spcc3eb5[8] . ':' . $spcc3eb5[7]); if ($sp5b6186 != $sp1193e4) { throw new \Exception('Licence is not valid'); } $spea9e1d = new \DateTime(); $spea9e1d->setTimestamp($sp4f99af); $sp458f3e = new \DateTime(); if ($spea9e1d < $sp458f3e) { throw new Exception('Licence expirÃ©e'); } return array('isvalid' => true, 'dtf' => $sp4f99af, 'plateform' => $sp6569aa, 'nbf' => $sp1a3556, 'nbs' => $spd708e3, 'stats' => $spaa9143, 'nom' => $spbf89aa, 'societe' => $spcdb2a6, 'domains' => explode(',', $sp5d773f)); } else { throw new \Exception('Licence file not found'); } } public function isNewFormAccepted() { $sp82244f = CoreManager::getLicenceInfos(); $sp43db43 = $this->container->get('leadsfactory.form_repository'); $sp422ec1 = $sp43db43->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($sp422ec1 < $sp82244f['nbf']) { return true; } else { return false; } } public function isNewScopeAccepted() { $sp82244f = CoreManager::getLicenceInfos(); $sp43db43 = $this->container->get('leadsfactory.scope_repository'); $spa201d7 = $sp43db43->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($spa201d7 < $sp82244f['nbs']) { return false; } else { return true; } } public function isMonitoringAccepted() { $sp82244f = CoreManager::getLicenceInfos(); return $sp82244f['stats']; } public function isDomainAccepted() { $sp49ad53 = $_SERVER['HTTP_HOST']; $sp82244f = CoreManager::getLicenceInfos(); $sp5d773f = $sp82244f['domains']; foreach ($sp5d773f as $spf6ac9b) { if (strstr($sp49ad53, $spf6ac9b)) { return 0; } } return 1; } }