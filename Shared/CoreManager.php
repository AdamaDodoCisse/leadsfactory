<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class CoreManager implements ContainerAwareInterface { private static $v1 = 3.14; private static $v2 = 5; private static $v3 = 2; private static $v6 = 2.5; private static $v4 = 235; private static $v5 = 520; private static $v7 = 326; private $logger; protected $container; public function setContainer(ContainerInterface $spd2256b = null) { $this->container = $spd2256b; $this->logger = $this->container->get('logger'); } protected function getContainer() { return $this->container; } public static function getLicenceInfos() { if (file_exists('../licence/licence.php')) { $sp99c47e = implode('', file('../licence/licence.php')); $sp2930c8 = explode('|', $sp99c47e); $spd7e0ab = ($sp2930c8[2] + CoreManager::$v2) / CoreManager::$v1; $sp4eec92 = $sp2930c8[3]; $sp3dde42 = $sp2930c8[4] * (CoreManager::$v2 / CoreManager::$v3) / (CoreManager::$v7 / 2); $sp65515d = ($sp2930c8[5] + CoreManager::$v5) / CoreManager::$v4; $sp355d32 = $sp2930c8[6]; $sp48e9d2 = $sp2930c8[9]; $sp2d606f = $sp2930c8[7]; $sp2259bd = $sp2930c8[8]; $sp99c47e = $sp2930c8[1]; $spba4b19 = md5($sp2930c8[2] . ':' . $sp2930c8[3] . ':' . $sp2930c8[4] . ':' . $sp2930c8[5] . ':' . $sp2930c8[6] . ':' . $sp2930c8[8] . ':' . $sp2930c8[7]); if ($sp99c47e != $spba4b19) { throw new \Exception('Licence is not valid'); } $sp8bd480 = new \DateTime(); $sp8bd480->setTimestamp($spd7e0ab); $sp2cd229 = new \DateTime(); if ($sp8bd480 < $sp2cd229) { throw new Exception('Licence expirÃ©e'); } return array('isvalid' => true, 'dtf' => $spd7e0ab, 'plateform' => $sp4eec92, 'nbf' => $sp3dde42, 'nbs' => $sp65515d, 'stats' => $sp355d32, 'nom' => $sp48e9d2, 'societe' => $sp2d606f, 'domains' => explode(',', $sp2259bd)); } else { throw new \Exception('Licence file not found'); } } public function isNewFormAccepted() { $spccd9c2 = CoreManager::getLicenceInfos(); $sp08d3b9 = $this->container->get('leadsfactory.form_repository'); $spbffb86 = $sp08d3b9->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($spbffb86 < $spccd9c2['nbf']) { return true; } else { return false; } } public function isNewScopeAccepted() { $spccd9c2 = CoreManager::getLicenceInfos(); $sp08d3b9 = $this->container->get('leadsfactory.scope_repository'); $spe335fc = $sp08d3b9->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($spe335fc < $spccd9c2['nbs']) { return false; } else { return true; } } public function isMonitoringAccepted() { $spccd9c2 = CoreManager::getLicenceInfos(); return $spccd9c2['stats']; } public function isDomainAccepted() { $sp4c27b1 = $_SERVER['HTTP_HOST']; $spccd9c2 = CoreManager::getLicenceInfos(); $sp2259bd = implode(',', $spccd9c2['domains']); if (strstr($sp4c27b1, $sp2259bd)) { $this->logger->info('domain accepted'); return 0; } else { $this->logger->info('domain refused : Accepted : ' . $sp2259bd); return 1; } } }