<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class CoreManager implements ContainerAwareInterface { private static $v1 = 3.14; private static $v2 = 5; private static $v3 = 2; private static $v6 = 2.5; private static $v4 = 235; private static $v5 = 520; private static $v7 = 326; private $logger; protected $container; public function setContainer(ContainerInterface $sp63c3a2 = null) { $this->container = $sp63c3a2; $this->logger = $this->container->get('logger'); } protected function getContainer() { return $this->container; } public static function getLicenceInfos() { if (file_exists('../licence/licence.php')) { $spbf1f67 = implode('', file('../licence/licence.php')); $sp454a22 = explode('|', $spbf1f67); $sp3878c4 = ($sp454a22[2] + CoreManager::$v2) / CoreManager::$v1; $sp6d0503 = $sp454a22[3]; $sp582e0a = $sp454a22[4] * (CoreManager::$v2 + 0.5) / (CoreManager::$v7 / 2); $sp8c01df = ($sp454a22[5] + CoreManager::$v5) / CoreManager::$v4; $sp7cf63d = $sp454a22[6]; $spf7a36b = $sp454a22[9]; $sp15aece = $sp454a22[7]; $spb07d69 = $sp454a22[8]; $spbf1f67 = $sp454a22[1]; $spa1bf58 = md5($sp454a22[2] . ':' . $sp454a22[3] . ':' . $sp454a22[4] . ':' . $sp454a22[5] . ':' . $sp454a22[6] . ':' . $sp454a22[8] . ':' . $sp454a22[7]); if ($spbf1f67 != $spa1bf58) { throw new \Exception('Licence is not valid'); } $sp49f0fe = new \DateTime(); $sp49f0fe->setTimestamp($sp3878c4); $sp5e235e = new \DateTime(); if ($sp49f0fe < $sp5e235e) { throw new Exception('Licence expirÃ©e'); } return array('isvalid' => true, 'dtf' => $sp3878c4, 'plateform' => $sp6d0503, 'nbf' => $sp582e0a, 'nbs' => $sp8c01df, 'stats' => $sp7cf63d, 'nom' => $spf7a36b, 'societe' => $sp15aece, 'domains' => explode(',', $spb07d69)); } else { throw new \Exception('Licence file not found'); } } public function isNewFormAccepted() { $sp60a429 = CoreManager::getLicenceInfos(); $sp7de8a8 = $this->container->get('leadsfactory.form_repository'); $sp766523 = $sp7de8a8->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($sp766523 < $sp60a429['nbf']) { return true; } else { return false; } } public function isNewScopeAccepted() { $sp60a429 = CoreManager::getLicenceInfos(); $sp7de8a8 = $this->container->get('leadsfactory.scope_repository'); $spffd430 = $sp7de8a8->createQueryBuilder('name')->select('COUNT(name)')->getQuery()->getSingleScalarResult(); if ($spffd430 < $sp60a429['nbs']) { return false; } else { return true; } } public function isMonitoringAccepted() { $sp60a429 = CoreManager::getLicenceInfos(); return $sp60a429['stats']; } public function isDomainAccepted() { $sp9d2b49 = $_SERVER['HTTP_HOST']; $sp60a429 = CoreManager::getLicenceInfos(); $spb07d69 = implode(',', $sp60a429['domains']); if (strstr($sp9d2b49, $spb07d69)) { $this->logger->info('domain accepted'); return 0; } else { $this->logger->info('domain refused : Accepted : ' . $spb07d69); return 1; } } }