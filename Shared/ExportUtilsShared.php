<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class ExportUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp2c896e = null) { $this->container = $sp2c896e; } public function createJob($sp14d90c) { $sp749a06 = $this->getContainer()->get('export.logger'); $spc2a975 = $sp14d90c->getForm()->getConfig(); foreach ($spc2a975['export'] as $sp5fd5b0 => $sp9d6229) { $sp79a2dd = new Export(); if (!$this->isValidExportMethod($sp5fd5b0)) { $sp79a2dd->setLog('Méthode d\'export invalide'); $sp749a06->info('Méthode d\'export invalide (formulaire ID ' . $sp14d90c->getForm()->getId() . ')'); } $sp79a2dd->setMethod($sp5fd5b0); $sp79a2dd->setLead($sp14d90c); $sp79a2dd->setForm($sp14d90c->getForm()); $sp3f766f = $this->getInitialExportStatus($sp14d90c, array('method' => $sp5fd5b0, 'method_config' => $sp9d6229)); $sp79a2dd->setStatus($sp3f766f); $sp79a2dd->setCreatedAt(new \DateTime()); $sp79a2dd->setScheduledAt($this->getScheduledDate($sp9d6229)); try { $sp3acc9e = $this->getContainer()->get('doctrine')->getManager(); $sp3acc9e->persist($sp79a2dd); $sp3acc9e->flush(); $sp749a06->info('Job export (ID ' . $sp79a2dd->getId() . ') créé avec succès'); } catch (Exception $sp66e770) { $sp749a06->error($sp66e770->getMessage()); } } } protected function getInitialExportStatus($sp14d90c, $spc2a975) { $spbeb2f5 = $spc2a975['method_config']; $spc9b8a3 = $this->getMethod($spc2a975['method']); if (array_key_exists('if_email_validated', $spbeb2f5) && $spbeb2f5['if_email_validated'] === true) { $sp78c282 = $sp14d90c->getEmail(); $sp0163f3 = $spc9b8a3->isEmailValidated($sp14d90c, $sp78c282); if ($sp0163f3) { return self::$_EXPORT_NOT_PROCESSED; } else { return self::EXPORT_EMAIL_NOT_CONFIRMED; } } else { return self::$_EXPORT_NOT_PROCESSED; } } protected function getScheduledDate($sp9d6229) { $sp17639c = isset($sp9d6229['cron']) ? $sp9d6229['cron'] : $this->_defaultCronExp; $sp550382 = CronExpression::factory($sp17639c); return $sp550382->getNextRunDate($this->getMinDate($sp9d6229)); } protected function getMinDate($sp9d6229) { if (!isset($sp9d6229['gap']) || trim($sp9d6229['gap']) == '') { return 'now'; } $sp7be3cf = new \DateTime(); return $sp7be3cf->add(new \DateInterval('PT' . trim($sp9d6229['gap']) . 'M')); } public function export($sp9bb2c9) { $sp749a06 = $this->getContainer()->get('export.logger'); $spc2a975 = $sp9bb2c9->getConfig(); if (!isset($spc2a975['export'])) { return; } foreach ($spc2a975['export'] as $sp5fd5b0 => $sp9d6229) { if (!$this->isValidExportMethod($sp5fd5b0)) { $sp749a06->error('Méthode d\'export "' . $sp5fd5b0 . '" invalide'); continue; } $spbe5593 = $this->getExportableJobs($sp9bb2c9, $sp5fd5b0, $sp9d6229); if (count($spbe5593)) { $this->getMethod($sp5fd5b0)->export($spbe5593, $sp9bb2c9); } } } protected function getExportableJobs($sp9bb2c9, $sp5fd5b0, $sp9d6229) { $sp3acc9e = $this->getContainer()->get('doctrine')->getManager(); $sp297eeb = $sp3acc9e->createQuery('SELECT j
            FROM TellawLeadsFactoryBundle:Export j
            WHERE j.form = :form
              AND j.method = :method
              AND j.scheduled_at <= :now
              AND j.status NOT IN (:status)'); $sp297eeb->setParameters(array('form' => $sp9bb2c9, 'method' => $sp5fd5b0, 'now' => new \DateTime(), 'status' => array(self::$_EXPORT_SUCCESS, self::EXPORT_EMAIL_NOT_CONFIRMED, self::$_EXPORT_NOT_SCHEDULED))); return $sp297eeb->getResult(); } public function updateJob($sp79a2dd, $sp3f766f, $sp385630 = '') { $sp79a2dd->setStatus($sp3f766f); $sp79a2dd->setExecutedAt(new \DateTime()); $sp79a2dd->setLog($sp385630); try { $sp3acc9e = $this->getContainer()->get('doctrine')->getManager(); $sp3acc9e->persist($sp79a2dd); $sp3acc9e->flush(); } catch (\Exception $sp66e770) { $this->getContainer()->get('export.logger')->error($sp66e770->getMessage()); } } public function updateLead($sp14d90c, $sp3f766f, $sp385630, $spfbace5 = null) { $spfbace5 = is_null($spfbace5) ? new \DateTime() : $spfbace5; $sp14d90c->setStatus($sp3f766f); $sp14d90c->setLog($sp385630); $sp14d90c->setExportdate($spfbace5); try { $sp3acc9e = $this->getContainer()->get('doctrine')->getManager(); $sp3acc9e->persist($sp14d90c); $sp3acc9e->flush(); } catch (\Exception $sp66e770) { $this->getContainer()->get('export.logger')->error($sp66e770->getMessage()); } } public function getErrorStatus($sp79a2dd) { if ($sp79a2dd->getStatus() == self::$_EXPORT_NOT_PROCESSED || is_null($sp79a2dd->getStatus())) { return self::$_EXPORT_ONE_TRY_ERROR; } else { return self::$_EXPORT_MULTIPLE_ERROR; } } }