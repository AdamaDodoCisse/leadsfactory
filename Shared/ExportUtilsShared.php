<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class ExportUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp63c3a2 = null) { $this->container = $sp63c3a2; } public function createJob($sp119292) { $spbe0ab2 = $this->getContainer()->get('export.logger'); $sp14e8b7 = $sp119292->getForm()->getConfig(); foreach ($sp14e8b7['export'] as $sp4058bc => $spe777ab) { $sp5c2863 = new Export(); if (!$this->isValidExportMethod($sp4058bc)) { $sp5c2863->setLog('Méthode d\'export invalide'); $spbe0ab2->info('Méthode d\'export invalide (formulaire ID ' . $sp119292->getForm()->getId() . ')'); } $sp5c2863->setMethod($sp4058bc); $sp5c2863->setLead($sp119292); $sp5c2863->setForm($sp119292->getForm()); $sp8b6fa2 = $this->getInitialExportStatus($sp119292, array('method' => $sp4058bc, 'method_config' => $spe777ab)); $sp5c2863->setStatus($sp8b6fa2); $sp5c2863->setCreatedAt(new \DateTime()); $sp5c2863->setScheduledAt($this->getScheduledDate($spe777ab)); try { $spfab6f9 = $this->getContainer()->get('doctrine')->getManager(); $spfab6f9->persist($sp5c2863); $spfab6f9->flush(); $spbe0ab2->info('Job export (ID ' . $sp5c2863->getId() . ') créé avec succès'); } catch (Exception $sp627b2b) { $spbe0ab2->error($sp627b2b->getMessage()); } } } protected function getInitialExportStatus($sp119292, $sp14e8b7) { $spc16fd2 = $sp14e8b7['method_config']; $sp857671 = $this->getMethod($sp14e8b7['method']); if (array_key_exists('if_email_validated', $spc16fd2) && $spc16fd2['if_email_validated'] === true) { $sp053594 = $sp119292->getEmail(); $sp837a21 = $sp857671->isEmailValidated($sp119292, $sp053594); if ($sp837a21) { return self::$_EXPORT_NOT_PROCESSED; } else { return self::EXPORT_EMAIL_NOT_CONFIRMED; } } else { return self::$_EXPORT_NOT_PROCESSED; } } protected function getScheduledDate($spe777ab) { $sp490391 = isset($spe777ab['cron']) ? $spe777ab['cron'] : $this->_defaultCronExp; $spbeaa69 = CronExpression::factory($sp490391); return $spbeaa69->getNextRunDate($this->getMinDate($spe777ab)); } protected function getMinDate($spe777ab) { if (!isset($spe777ab['gap']) || trim($spe777ab['gap']) == '') { return 'now'; } $sp5462e3 = new \DateTime(); return $sp5462e3->add(new \DateInterval('PT' . trim($spe777ab['gap']) . 'M')); } public function export($spa09441) { $spbe0ab2 = $this->getContainer()->get('export.logger'); $sp14e8b7 = $spa09441->getConfig(); if (!isset($sp14e8b7['export'])) { return; } foreach ($sp14e8b7['export'] as $sp4058bc => $spe777ab) { if (!$this->isValidExportMethod($sp4058bc)) { $spbe0ab2->error('Méthode d\'export "' . $sp4058bc . '" invalide'); continue; } $spfe01f9 = $this->getExportableJobs($spa09441, $sp4058bc, $spe777ab); if (count($spfe01f9)) { $this->getMethod($sp4058bc)->export($spfe01f9, $spa09441); } } } protected function getExportableJobs($spa09441, $sp4058bc, $spe777ab) { $spfab6f9 = $this->getContainer()->get('doctrine')->getManager(); $sp043d70 = $spfab6f9->createQuery('SELECT j
            FROM TellawLeadsFactoryBundle:Export j
            WHERE j.form = :form
              AND j.method = :method
              AND j.scheduled_at <= :now
              AND j.status NOT IN (:status)'); $sp043d70->setParameters(array('form' => $spa09441, 'method' => $sp4058bc, 'now' => new \DateTime(), 'status' => array(self::$_EXPORT_SUCCESS, self::EXPORT_EMAIL_NOT_CONFIRMED, self::$_EXPORT_NOT_SCHEDULED))); return $sp043d70->getResult(); } public function updateJob($sp5c2863, $sp8b6fa2, $sp0da064 = '') { $sp5c2863->setStatus($sp8b6fa2); $sp5c2863->setExecutedAt(new \DateTime()); $sp5c2863->setLog($sp0da064); try { $spfab6f9 = $this->getContainer()->get('doctrine')->getManager(); $spfab6f9->persist($sp5c2863); $spfab6f9->flush(); } catch (\Exception $sp627b2b) { $this->getContainer()->get('export.logger')->error($sp627b2b->getMessage()); } } public function updateLead($sp119292, $sp8b6fa2, $sp0da064, $sp56e0e2 = null) { $sp56e0e2 = is_null($sp56e0e2) ? new \DateTime() : $sp56e0e2; $sp119292->setStatus($sp8b6fa2); $sp119292->setLog($sp0da064); $sp119292->setExportdate($sp56e0e2); try { $spfab6f9 = $this->getContainer()->get('doctrine')->getManager(); $spfab6f9->persist($sp119292); $spfab6f9->flush(); } catch (\Exception $sp627b2b) { $this->getContainer()->get('export.logger')->error($sp627b2b->getMessage()); } } public function getErrorStatus($sp5c2863) { if ($sp5c2863->getStatus() == self::$_EXPORT_NOT_PROCESSED || is_null($sp5c2863->getStatus())) { return self::$_EXPORT_ONE_TRY_ERROR; } else { return self::$_EXPORT_MULTIPLE_ERROR; } } }