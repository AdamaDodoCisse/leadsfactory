<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; use Tellaw\LeadsFactoryBundle\Entity\Export; use Tellaw\LeadsFactoryBundle\Utils\ExportUtils; use Cron\CronExpression; use Symfony\Component\Config\Definition\Exception\Exception; use Symfony\Component\Validator\Constraints\DateTime; use Tellaw\LeadsFactoryBundle\Entity\Leads; use Tellaw\LeadsFactoryBundle\Entity\ClientEmailRepository; class ExportUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp5efe08 = null) { $this->container = $sp5efe08; } public function createJob($spffe9f9) { $sp7ea8fe = $this->getContainer()->get('export.logger'); $sp419ccb = $spffe9f9->getForm()->getConfig(); foreach ($sp419ccb['export'] as $spdd7f7c => $sp7cd6b7) { $sp06e930 = new Export(); if (!$this->isValidExportMethod($spdd7f7c)) { $sp06e930->setLog('Méthode d\'export invalide'); $sp7ea8fe->info('Méthode d\'export invalide (formulaire ID ' . $spffe9f9->getForm()->getId() . ')'); } $sp06e930->setMethod($spdd7f7c); $sp06e930->setLead($spffe9f9); $sp06e930->setForm($spffe9f9->getForm()); $sp151625 = $this->getInitialExportStatus($spffe9f9, array('method' => $spdd7f7c, 'method_config' => $sp7cd6b7)); $sp06e930->setStatus($sp151625); $sp06e930->setCreatedAt(new \DateTime()); $sp06e930->setScheduledAt($this->getScheduledDate($sp7cd6b7)); try { $sped4c8b = $this->getContainer()->get('doctrine')->getManager(); $sped4c8b->persist($sp06e930); $sped4c8b->flush(); $sp7ea8fe->info('Job export (ID ' . $sp06e930->getId() . ') créé avec succès'); } catch (Exception $spb86864) { $sp7ea8fe->error($spb86864->getMessage()); } } } protected function getInitialExportStatus($spffe9f9, $sp419ccb) { $spba88ba = $sp419ccb['method_config']; $sp02dcca = $this->getMethod($sp419ccb['method']); if (array_key_exists('if_email_validated', $spba88ba) && $spba88ba['if_email_validated'] === true) { $sp2c3c86 = $spffe9f9->getEmail(); $sp847bf5 = $sp02dcca->isEmailValidated($spffe9f9, $sp2c3c86); if ($sp847bf5) { return ExportUtils::$_EXPORT_NOT_PROCESSED; } else { return ExportUtils::EXPORT_EMAIL_NOT_CONFIRMED; } } else { return ExportUtils::$_EXPORT_NOT_PROCESSED; } } protected function getScheduledDate($sp7cd6b7) { $sp936842 = isset($sp7cd6b7['cron']) ? $sp7cd6b7['cron'] : $this->_defaultCronExp; $spb5bdaa = CronExpression::factory($sp936842); return $spb5bdaa->getNextRunDate($this->getMinDate($sp7cd6b7)); } protected function getMinDate($sp7cd6b7) { if (!isset($sp7cd6b7['gap']) || trim($sp7cd6b7['gap']) == '') { return 'now'; } $spb394f1 = new \DateTime(); return $spb394f1->add(new \DateInterval('PT' . trim($sp7cd6b7['gap']) . 'M')); } public function export($spe49ec6) { $sp7ea8fe = $this->getContainer()->get('export.logger'); $sp419ccb = $spe49ec6->getConfig(); if (!isset($sp419ccb['export'])) { return; } foreach ($sp419ccb['export'] as $spdd7f7c => $sp7cd6b7) { if (!$this->isValidExportMethod($spdd7f7c)) { $sp7ea8fe->error('Méthode d\'export "' . $spdd7f7c . '" invalide'); continue; } $sp70e00a = $this->getExportableJobs($spe49ec6, $spdd7f7c, $sp7cd6b7); if (count($sp70e00a)) { $this->getMethod($spdd7f7c)->export($sp70e00a, $spe49ec6); } } } protected function getExportableJobs($spe49ec6, $spdd7f7c, $sp7cd6b7) { $sped4c8b = $this->getContainer()->get('doctrine')->getManager(); $sp300a1f = $sped4c8b->createQuery('SELECT j
            FROM TellawLeadsFactoryBundle:Export j
            WHERE j.form = :form
              AND j.method = :method
              AND j.scheduled_at <= :now
              AND j.status NOT IN (:status)'); $sp300a1f->setParameters(array('form' => $spe49ec6, 'method' => $spdd7f7c, 'now' => new \DateTime(), 'status' => array(ExportUtils::$_EXPORT_SUCCESS, ExportUtils::EXPORT_EMAIL_NOT_CONFIRMED, ExportUtils::$_EXPORT_NOT_SCHEDULED))); return $sp300a1f->getResult(); } public function updateJob($sp06e930, $sp151625, $sp8dd87e = '') { $sp06e930->setStatus($sp151625); $sp06e930->setExecutedAt(new \DateTime()); $sp06e930->setLog($sp8dd87e); try { $sped4c8b = $this->getContainer()->get('doctrine')->getManager(); $sped4c8b->persist($sp06e930); $sped4c8b->flush(); } catch (\Exception $spb86864) { $this->getContainer()->get('export.logger')->error($spb86864->getMessage()); } } public function updateLead($spffe9f9, $sp151625, $sp8dd87e, $spe5a5df = null) { $spe5a5df = is_null($spe5a5df) ? new \DateTime() : $spe5a5df; $spffe9f9->setStatus($sp151625); $spffe9f9->setLog($sp8dd87e); $spffe9f9->setExportdate($spe5a5df); try { $sped4c8b = $this->getContainer()->get('doctrine')->getManager(); $sped4c8b->persist($spffe9f9); $sped4c8b->flush(); } catch (\Exception $spb86864) { $this->getContainer()->get('export.logger')->error($spb86864->getMessage()); } } public function getErrorStatus($sp06e930) { if ($sp06e930->getStatus() == ExportUtils::$_EXPORT_NOT_PROCESSED || is_null($sp06e930->getStatus())) { return ExportUtils::$_EXPORT_ONE_TRY_ERROR; } else { return ExportUtils::$_EXPORT_MULTIPLE_ERROR; } } }