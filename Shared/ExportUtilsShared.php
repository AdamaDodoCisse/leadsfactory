<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class ExportUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $spd2256b = null) { $this->container = $spd2256b; } public function createJob($spb8b1d8) { $sp23c240 = $this->getContainer()->get('export.logger'); $spb50524 = $spb8b1d8->getForm()->getConfig(); foreach ($spb50524['export'] as $spe9c4a6 => $spc3edee) { $sp968ab3 = new Export(); if (!$this->isValidExportMethod($spe9c4a6)) { $sp968ab3->setLog('Méthode d\'export invalide'); $sp23c240->info('Méthode d\'export invalide (formulaire ID ' . $spb8b1d8->getForm()->getId() . ')'); } $sp968ab3->setMethod($spe9c4a6); $sp968ab3->setLead($spb8b1d8); $sp968ab3->setForm($spb8b1d8->getForm()); $sp7efab1 = $this->getInitialExportStatus($spb8b1d8, array('method' => $spe9c4a6, 'method_config' => $spc3edee)); $sp968ab3->setStatus($sp7efab1); $sp968ab3->setCreatedAt(new \DateTime()); $sp968ab3->setScheduledAt($this->getScheduledDate($spc3edee)); try { $sp6da34d = $this->getContainer()->get('doctrine')->getManager(); $sp6da34d->persist($sp968ab3); $sp6da34d->flush(); $sp23c240->info('Job export (ID ' . $sp968ab3->getId() . ') créé avec succès'); } catch (Exception $sp4ba304) { $sp23c240->error($sp4ba304->getMessage()); } } } protected function getInitialExportStatus($spb8b1d8, $spb50524) { $spdedeb1 = $spb50524['method_config']; $sp41abcf = $this->getMethod($spb50524['method']); if (array_key_exists('if_email_validated', $spdedeb1) && $spdedeb1['if_email_validated'] === true) { $sp5270ee = $spb8b1d8->getEmail(); $spd1ce50 = $sp41abcf->isEmailValidated($spb8b1d8, $sp5270ee); if ($spd1ce50) { return self::$_EXPORT_NOT_PROCESSED; } else { return self::EXPORT_EMAIL_NOT_CONFIRMED; } } else { return self::$_EXPORT_NOT_PROCESSED; } } protected function getScheduledDate($spc3edee) { $spf7423d = isset($spc3edee['cron']) ? $spc3edee['cron'] : $this->_defaultCronExp; $sp678240 = CronExpression::factory($spf7423d); return $sp678240->getNextRunDate($this->getMinDate($spc3edee)); } protected function getMinDate($spc3edee) { if (!isset($spc3edee['gap']) || trim($spc3edee['gap']) == '') { return 'now'; } $sp94ac6d = new \DateTime(); return $sp94ac6d->add(new \DateInterval('PT' . trim($spc3edee['gap']) . 'M')); } public function export($sp58caff) { $sp23c240 = $this->getContainer()->get('export.logger'); $spb50524 = $sp58caff->getConfig(); if (!isset($spb50524['export'])) { return; } foreach ($spb50524['export'] as $spe9c4a6 => $spc3edee) { if (!$this->isValidExportMethod($spe9c4a6)) { $sp23c240->error('Méthode d\'export "' . $spe9c4a6 . '" invalide'); continue; } $sp07539e = $this->getExportableJobs($sp58caff, $spe9c4a6, $spc3edee); if (count($sp07539e)) { $this->getMethod($spe9c4a6)->export($sp07539e, $sp58caff); } } } protected function getExportableJobs($sp58caff, $spe9c4a6, $spc3edee) { $sp6da34d = $this->getContainer()->get('doctrine')->getManager(); $sp7019f1 = $sp6da34d->createQuery('SELECT j
            FROM TellawLeadsFactoryBundle:Export j
            WHERE j.form = :form
              AND j.method = :method
              AND j.scheduled_at <= :now
              AND j.status NOT IN (:status)'); $sp7019f1->setParameters(array('form' => $sp58caff, 'method' => $spe9c4a6, 'now' => new \DateTime(), 'status' => array(self::$_EXPORT_SUCCESS, self::EXPORT_EMAIL_NOT_CONFIRMED, self::$_EXPORT_NOT_SCHEDULED))); return $sp7019f1->getResult(); } public function updateJob($sp968ab3, $sp7efab1, $sp4317eb = '') { $sp968ab3->setStatus($sp7efab1); $sp968ab3->setExecutedAt(new \DateTime()); $sp968ab3->setLog($sp4317eb); try { $sp6da34d = $this->getContainer()->get('doctrine')->getManager(); $sp6da34d->persist($sp968ab3); $sp6da34d->flush(); } catch (\Exception $sp4ba304) { $this->getContainer()->get('export.logger')->error($sp4ba304->getMessage()); } } public function updateLead($spb8b1d8, $sp7efab1, $sp4317eb, $sp6a26b5 = null) { $sp6a26b5 = is_null($sp6a26b5) ? new \DateTime() : $sp6a26b5; $spb8b1d8->setStatus($sp7efab1); $spb8b1d8->setLog($sp4317eb); $spb8b1d8->setExportdate($sp6a26b5); try { $sp6da34d = $this->getContainer()->get('doctrine')->getManager(); $sp6da34d->persist($spb8b1d8); $sp6da34d->flush(); } catch (\Exception $sp4ba304) { $this->getContainer()->get('export.logger')->error($sp4ba304->getMessage()); } } public function getErrorStatus($sp968ab3) { if ($sp968ab3->getStatus() == self::$_EXPORT_NOT_PROCESSED || is_null($sp968ab3->getStatus())) { return self::$_EXPORT_ONE_TRY_ERROR; } else { return self::$_EXPORT_MULTIPLE_ERROR; } } }