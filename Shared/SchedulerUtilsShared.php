<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class SchedulerUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp2c896e = null) { $this->container = $sp2c896e; } public function getScheduledJobs() { if (!$this->organisedScheduledJobs) { foreach ($this->scheduledJobs as $sp441507) { $sp79a2dd = $this->getContainer()->get($sp441507); $this->organisedScheduledJobs[$sp79a2dd->getName()] = array('id' => $sp441507, 'job' => $sp79a2dd); } } return $this->organisedScheduledJobs; } public function updateDatabaseJobs() { $spbe5593 = $this->getScheduledJobs(); $sp3acc9e = $this->getContainer()->get('doctrine.orm.entity_manager'); $spfabaf3 = $sp3acc9e->getRepository('TellawLeadsFactoryBundle:CronTask'); foreach ($spbe5593 as $sp7ef9bb => $sp0ac5cc) { $sp79a2dd = $sp0ac5cc['job']; $spff7219 = $spfabaf3->findOneByName($sp7ef9bb); if (!$spff7219) { $spff7219 = new CronTask(); $spff7219->setName($sp79a2dd->getName()); $spff7219->setCronexpression($sp79a2dd->getExpression()); $spff7219->setCommands($sp79a2dd->getCommands()); $spff7219->setEnabled($sp79a2dd->getEnabled()); $sp458f3e = new \DateTime(); $spff7219->setCreatedAt($sp458f3e); $spff7219->setModifiedAt($sp458f3e); $spff7219->setServiceName($sp0ac5cc['id']); $sp3acc9e->persist($spff7219); } else { $sp7e4a73 = false; if ($sp79a2dd->getCommands() != $spff7219->getCommands()) { $spff7219->setCommands($sp79a2dd->getCommands()); $sp7e4a73 = true; } if ($sp7e4a73) { $sp458f3e = new \DateTime(); $spff7219->setModifiedAt($sp458f3e); $sp3acc9e->persist($spff7219); $sp3acc9e->flush(); } } } } }