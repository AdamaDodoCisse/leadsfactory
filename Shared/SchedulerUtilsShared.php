<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class SchedulerUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $spd2256b = null) { $this->container = $spd2256b; } public function getScheduledJobs() { if (!$this->organisedScheduledJobs) { foreach ($this->scheduledJobs as $sp597e41) { $sp968ab3 = $this->getContainer()->get($sp597e41); $this->organisedScheduledJobs[$sp968ab3->getName()] = array('id' => $sp597e41, 'job' => $sp968ab3); } } return $this->organisedScheduledJobs; } public function updateDatabaseJobs() { $sp07539e = $this->getScheduledJobs(); $sp6da34d = $this->getContainer()->get('doctrine.orm.entity_manager'); $spe68802 = $sp6da34d->getRepository('TellawLeadsFactoryBundle:CronTask'); foreach ($sp07539e as $spbc9261 => $sp6dc4ae) { $sp968ab3 = $sp6dc4ae['job']; $sp63884d = $spe68802->findOneByName($spbc9261); if (!$sp63884d) { $sp63884d = new CronTask(); $sp63884d->setName($sp968ab3->getName()); $sp63884d->setCronexpression($sp968ab3->getExpression()); $sp63884d->setCommands($sp968ab3->getCommands()); $sp63884d->setEnabled($sp968ab3->getEnabled()); $sp2cd229 = new \DateTime(); $sp63884d->setCreatedAt($sp2cd229); $sp63884d->setModifiedAt($sp2cd229); $sp63884d->setServiceName($sp6dc4ae['id']); $sp6da34d->persist($sp63884d); } else { $sp589282 = false; if ($sp968ab3->getCommands() != $sp63884d->getCommands()) { $sp63884d->setCommands($sp968ab3->getCommands()); $sp589282 = true; } if ($sp589282) { $sp2cd229 = new \DateTime(); $sp63884d->setModifiedAt($sp2cd229); $sp6da34d->persist($sp63884d); $sp6da34d->flush(); } } } } }