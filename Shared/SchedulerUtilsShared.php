<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class SchedulerUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp63c3a2 = null) { $this->container = $sp63c3a2; } public function getScheduledJobs() { if (!$this->organisedScheduledJobs) { foreach ($this->scheduledJobs as $sp4192dd) { $sp5c2863 = $this->getContainer()->get($sp4192dd); $this->organisedScheduledJobs[$sp5c2863->getName()] = array('id' => $sp4192dd, 'job' => $sp5c2863); } } return $this->organisedScheduledJobs; } public function updateDatabaseJobs() { $spfe01f9 = $this->getScheduledJobs(); $spfab6f9 = $this->getContainer()->get('doctrine.orm.entity_manager'); $sp1893e5 = $spfab6f9->getRepository('TellawLeadsFactoryBundle:CronTask'); foreach ($spfe01f9 as $spead3c5 => $sp7ad19a) { $sp5c2863 = $sp7ad19a['job']; $sp1f4b4f = $sp1893e5->findOneByName($spead3c5); if (!$sp1f4b4f) { $sp1f4b4f = new CronTask(); $sp1f4b4f->setName($sp5c2863->getName()); $sp1f4b4f->setCronexpression($sp5c2863->getExpression()); $sp1f4b4f->setCommands($sp5c2863->getCommands()); $sp1f4b4f->setEnabled($sp5c2863->getEnabled()); $sp5e235e = new \DateTime(); $sp1f4b4f->setCreatedAt($sp5e235e); $sp1f4b4f->setModifiedAt($sp5e235e); $sp1f4b4f->setServiceName($sp7ad19a['id']); $spfab6f9->persist($sp1f4b4f); } else { $sp68e647 = false; if ($sp5c2863->getCommands() != $sp1f4b4f->getCommands()) { $sp1f4b4f->setCommands($sp5c2863->getCommands()); $sp68e647 = true; } if ($sp68e647) { $sp5e235e = new \DateTime(); $sp1f4b4f->setModifiedAt($sp5e235e); $spfab6f9->persist($sp1f4b4f); $spfab6f9->flush(); } } } } }