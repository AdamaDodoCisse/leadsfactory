<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Symfony\Component\DependencyInjection\ContainerAwareInterface; use Symfony\Component\DependencyInjection\ContainerInterface; class SchedulerUtilsShared implements ContainerAwareInterface { protected $container; public function setContainer(ContainerInterface $sp8cfdd2 = null) { $this->container = $sp8cfdd2; } public function getScheduledJobs() { if (!$this->organisedScheduledJobs) { foreach ($this->scheduledJobs as $sp75600f) { $spf73837 = $this->getContainer()->get($sp75600f); $this->organisedScheduledJobs[$spf73837->getName()] = array('id' => $sp75600f, 'job' => $spf73837); } } return $this->organisedScheduledJobs; } public function updateDatabaseJobs() { $sp0c5340 = $this->getScheduledJobs(); $spc9900d = $this->getContainer()->get('doctrine.orm.entity_manager'); $sp326782 = $spc9900d->getRepository('TellawLeadsFactoryBundle:CronTask'); foreach ($sp0c5340 as $sp7488be => $spa68fdd) { $spf73837 = $spa68fdd['job']; $sp3afc31 = $sp326782->findOneByName($sp7488be); if (!$sp3afc31) { $sp3afc31 = new CronTask(); $sp3afc31->setName($spf73837->getName()); $sp3afc31->setCronexpression($spf73837->getExpression()); $sp3afc31->setCommands($spf73837->getCommands()); $sp3afc31->setEnabled($spf73837->getEnabled()); $sp33b9ca = new \DateTime(); $sp3afc31->setCreatedAt($sp33b9ca); $sp3afc31->setModifiedAt($sp33b9ca); $sp3afc31->setServiceName($spa68fdd['id']); $spc9900d->persist($sp3afc31); } else { $sp444c1c = false; if ($spf73837->getCommands() != $sp3afc31->getCommands()) { $sp3afc31->setCommands($spf73837->getCommands()); $sp444c1c = true; } if ($sp444c1c) { $sp33b9ca = new \DateTime(); $sp3afc31->setModifiedAt($sp33b9ca); $spc9900d->persist($sp3afc31); $spc9900d->flush(); } } } } }