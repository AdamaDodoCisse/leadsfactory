<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Tellaw\LeadsFactoryBundle\Utils\Chart; class ChartShared { public function getSpecialGraphIndexes() { return $this->specialGraphIndexes; } public function getGraphCount() { return $this->graph_count; } public function setPeriod($spc29b4a) { $this->period = $spc29b4a; } public function getPeriod() { return $this->period; } public function setFormType($spb6e741) { if (empty($spb6e741)) { $this->formType = $this->_getAllFormTypes(); } else { $this->formType = empty($spb6e741) || is_array($spb6e741) ? $spb6e741 : array($spb6e741); } } public function getFormType() { return $this->formType; } public function setForm($sp58caff) { $this->form = $sp58caff; } public function getForm() { return $this->form; } protected function _loadLeadsDataByTypes() { $sp6da34d = $this->container->get('doctrine')->getManager(); $spd30d05 = array(); foreach ($this->formType as $spb6e741) { if (!is_object($spb6e741)) { $spb6e741 = $this->getContainer()->get('leadsfactory.form_type_repository')->findOneById($spb6e741); } $spb8dd4a = $sp6da34d->createQueryBuilder(); $spb8dd4a->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.formType = :form_type_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_type_id', $spb6e741->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $spb8dd4a = $this->excludeInternalLeads($spb8dd4a); $sp9c63fc = $spb8dd4a->getQuery()->getResult(); array_unshift($sp9c63fc, $spb6e741->getName()); $spd30d05[$spb6e741->getName()] = $sp9c63fc; } return $spd30d05; } protected function _loadLeadsDataByFormsType() { $sp94ac6d = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp6da34d = $this->container->get('doctrine')->getManager(); $spd30d05 = array(); $spaf697d = $this->formType[0]; $spf10725 = $this->container->get('leadsfactory.form_repository')->findByFormType($spaf697d); foreach ($spf10725 as $sp58caff) { $spb8dd4a = $sp6da34d->createQueryBuilder(); $spb8dd4a->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp58caff->getId())->setParameter('minDate', $sp94ac6d); $spb8dd4a = $this->excludeInternalLeads($spb8dd4a); $sp9c63fc = $spb8dd4a->getQuery()->getResult(); array_unshift($sp9c63fc, $sp58caff->getName()); $spd30d05[$sp58caff->getId()] = $sp9c63fc; } return $spd30d05; } protected function _loadLeadsDataByForm() { $sp94ac6d = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp6da34d = $this->container->get('doctrine')->getManager(); $spd30d05 = array(); foreach ($this->form as $sp58caff) { if (!$sp58caff instanceof Form) { $sp58caff = $this->container->get('leadsfactory.form_repository')->findOneById($sp58caff); } if ($sp58caff === null) { continue; } $spb8dd4a = $sp6da34d->createQueryBuilder(); $spb8dd4a->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp58caff->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $spb8dd4a = $this->excludeInternalLeads($spb8dd4a); $sp9c63fc = $spb8dd4a->getQuery()->getResult(); array_unshift($sp9c63fc, $sp58caff->getName()); $spd30d05[$sp58caff->getName()] = $sp9c63fc; } return $spd30d05; } protected function _getRangeMinDate() { $sp00fe47 = $this->container->get('lf.utils'); $sp696f77 = $sp00fe47->getUserPreferences(); return clone $sp696f77->getDataPeriodMinDate(); } protected function _getRangeMaxDate() { $sp00fe47 = $this->container->get('lf.utils'); $sp696f77 = $sp00fe47->getUserPreferences(); return $sp696f77->getDataPeriodMaxDate(); } protected function _getAllFormTypes() { $sp6da34d = $this->container->get('doctrine')->getManager(); $spa59235 = $this->getContainer()->get('leadsfactory.form_type_repository')->findAll(); return $spa59235; } protected function _formatChartData($spd30d05) { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); $sp6fabe7 = $spc59309->format('%R%m'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { $spdf7d17 = true; } else { $spdf7d17 = false; } $sp77bbf8 = array(); $spddcbfe = array(); $sp5f49f5 = true; foreach ($spd30d05 as $sp46b8e7) { $spa88dc4 = array_shift($sp46b8e7); $sp77bbf8[$spa88dc4] = array(); $spfee249 = $this->_getRangeMinDate(); if ($spdf7d17) { for ($spf80b84 = 0; $spf80b84 <= $spec5540; $spf80b84++) { if ($sp5f49f5) { $spddcbfe[] = (string) $spfee249->format('d/m/Y'); } $sp77bbf8[$spa88dc4][(string) $spfee249->format('d/m/Y')] = 0; $spfee249->add(new \DateInterval('P1D')); } $sp5f49f5 = false; foreach ($sp46b8e7 as $sp4e0be1) { $sp77bbf8[$spa88dc4][(string) $sp4e0be1['date']] = $sp4e0be1['n']; } } else { for ($spf80b84 = 0; $spf80b84 < $sp6fabe7; $spf80b84++) { die; } } } $this->graphTimeRange = $spddcbfe; $spc9abb8 = array(); $spd9ecb5 = 0; foreach ($sp77bbf8 as $sp99c47e => $sp46b8e7) { $spc9abb8[$spd9ecb5] = array(); $spc9abb8[$spd9ecb5][] = $sp99c47e; foreach ($sp46b8e7 as $sp187e35) { $spc9abb8[$spd9ecb5][] = (int) $sp187e35; } $spd9ecb5++; } if (Chart::DEBUG_MODE) { var_dump('Formated output'); var_dump($sp77bbf8); var_dump('Google Formated output <chartData>'); var_dump($spc9abb8); var_dump('TimeRange output'); var_dump($spddcbfe); } return $spc9abb8; } protected function _addAdditionalGraphs($sp66a48e) { $this->graph_count = count($sp66a48e); $sp00fe47 = $this->container->get('lf.utils'); $sp0eb8b0 = $sp00fe47->getUserPreferences(); if ($sp0eb8b0->getDataDisplayAverage()) { $sp66a48e[] = $this->_addAverageGraph($sp66a48e); } if ($sp0eb8b0->getDataDisplayTotal()) { $sp66a48e[] = $this->_addTotalGraph($sp66a48e); } $this->setSpecialGraphIndexes($sp66a48e); $this->setNormalGraph($sp66a48e); return $sp66a48e; } protected function _addTotalGraph($sp66a48e) { $spe1850d = count($sp66a48e[0]); $spda5011 = array('Total'); for ($spf32502 = 1; $spf32502 < $spe1850d; $spf32502++) { $sp29bce7 = 0; for ($sp43a586 = 0; $sp43a586 < $this->graph_count; $sp43a586++) { $sp29bce7 += $sp66a48e[$sp43a586][$spf32502]; } $spda5011[$spf32502] = $sp29bce7; } return $spda5011; } protected function _addAverageGraph($sp66a48e) { $spe1850d = count($sp66a48e[0]); $sp53e91e = count($sp66a48e); $sp29bce7 = 0; $sp69e6fc = array('Moyenne'); for ($spf32502 = 1; $spf32502 < $spe1850d; $spf32502++) { $sp29bce7 = 0; foreach ($sp66a48e as $sp463a2c) { $sp29bce7 += $sp463a2c[$spf32502]; } $sp69e6fc[] = $sp29bce7 / $sp53e91e; } return $sp69e6fc; } public function getTimeRange() { return json_encode($this->graphTimeRange); } protected function _getYearRange() { $spbea4e9 = new \DateTime(); $spf04b5d = $this->_getRangeMinDate(); $sp5dd508 = array(); while ($spf04b5d <= $spbea4e9) { $sp5dd508[] = $spf04b5d->format('M y'); $spf04b5d->modify('+1 month'); } return $sp5dd508; } protected function _getMonthRange() { $spbea4e9 = new \DateTime(); $spf04b5d = $this->_getRangeMinDate(); $sp5dd508 = array(); while ($spf04b5d <= $spbea4e9) { $sp5dd508[] = $spf04b5d->format('d/m'); $spf04b5d->modify('+1 day'); } return $sp5dd508; } public function getChartTitle() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spbfac2e = 'Lead\\\'s du ' . $sp94ac6d->format('d m Y') . ' au ' . $sp83fa19->format('d m Y'); return $spbfac2e; } protected function _getSqlDateFormat() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { return '%d/%m/%Y'; } else { return '%d/%m/%Y'; } } protected function _getDateFormat() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { return 'md'; } else { return 'Ym'; } } protected function _getDateIncrement() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { return 'day'; } else { return 'month'; } } protected function _getIndexNumber($spde7550) { switch ($this->period) { case self::PERIOD_YEAR: return 13; case self::PERIOD_MONTH: $sp94ac6d = $this->_getRangeMinDate(); return cal_days_in_month(CAL_GREGORIAN, $sp94ac6d->format('m'), $sp94ac6d->format('Y')) + 1; default: throw new \Exception('Unknown timeframe'); } } protected function _getSqlGroupByAggregates() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { return array('DAY(l.createdAt) as day', 'MONTH(l.createdAt) as month'); } else { return array('MONTH(l.createdAt) as month', 'YEAR(l.createdAt) as year'); } } protected function _getSqlGroupByClause() { $sp94ac6d = $this->_getRangeMinDate(); $sp83fa19 = $this->_getRangeMaxDate(); $spc59309 = $sp94ac6d->diff($sp83fa19); $spec5540 = $spc59309->format('%R%a'); if ($spec5540 < Chart::ZOOM_SWITCH_RANGE) { return 'day, month'; } else { return 'month, year'; } } public function setSpecialGraphIndexes($sp66a48e) { $sp670893 = array(); foreach ($sp66a48e as $sp99c47e => $spd30d05) { if ($sp99c47e >= $this->graph_count) { $sp670893[] = $sp99c47e; } } $this->specialGraphIndexes = $sp670893; } public function setNormalGraph($sp66a48e) { $sp670893 = array(); foreach ($sp66a48e as $sp99c47e => $spd30d05) { if ($sp99c47e < $this->graph_count) { $sp670893[] = $spd30d05[0]; } } $this->normalGraph = $sp670893; } public function getNormalGraph() { return json_encode($this->normalGraph); } public function loadDemoData($sp677034 = null) { echo 'Loading demo data
'; $sp6da34d = $this->container->get('doctrine')->getManager(); if ($sp677034 == null) { $spf10725 = $this->container->get('leadsfactory.form_repository')->findAll(); } else { $spf10725 = array($this->container->get('leadsfactory.form_repository')->find($sp677034)); } foreach ($spf10725 as $sp58caff) { $sp0f47ac = new \DateTime(); $sp174fc0 = new \DateInterval('P1D'); echo 'Processing form (' . $sp58caff->getId() . ' -> ' . $sp58caff->getName() . ')
'; echo '--> Deleting leads
'; $sp7019f1 = $sp6da34d->getConnection()->prepare('DELETE FROM Leads WHERE form_id = :form_id'); $sp7019f1->bindValue('form_id', $sp58caff->getId()); $sp7019f1->execute(); for ($spf32502 = 0; $spf32502 < 365; $spf32502++) { $sp6f1fad = rand(0, 5); echo '--> Creating Lead DAY : ' . $spf32502 . '/365 (form : ' . $sp58caff->getId() . ' / number of leads to create : ' . $sp6f1fad . ')
'; $sp0f47ac->sub($sp174fc0); for ($sp43a586 = 0; $sp43a586 <= $sp6f1fad; $sp43a586++) { $spb8b1d8 = new Leads(); $spb8b1d8->setFirstname('firstname-(' . $sp43a586 . '/' . $sp6f1fad . ')-' . rand()); $spb8b1d8->setLastname('lastname-' . rand()); $spb8b1d8->setStatus(1); $spb8b1d8->setFormType($sp58caff->getFormType()); $spb8b1d8->setForm($sp58caff); $spb8b1d8->setCreatedAt($sp0f47ac); $sp6da34d->persist($spb8b1d8); $sp6da34d->flush(); unset($spb8b1d8); } $this->createPageViewsForDemo($sp6f1fad, $sp58caff, $sp0f47ac); } } } protected function createPageViewsForDemo($sp6f1fad, $sp58caff, $sp0f47ac) { $spffc6fe = rand(1, 99); $sp36e5be = $spffc6fe / 100 * $sp6f1fad + $sp6f1fad; for ($sp43a586 = 0; $sp43a586 <= $sp36e5be; $sp43a586++) { $spf6239e = new Tracking(); $spbd5fd7 = rand(0, 1); if ($spbd5fd7) { $spb94d75 = rand(1, 5); $spb94d75 = 'demo_utm_code_' . $spb94d75; $spf6239e->setUtmCampaign($spb94d75); } $spf6239e->setForm($sp58caff); $spf6239e->setCreatedAt($sp0f47ac); $sp6da34d = $this->container->get('doctrine')->getManager(); $sp6da34d->persist($spf6239e); $sp6da34d->flush(); unset($spf6239e); unset($spbd5fd7); unset($spb94d75); } unset($sp36e5be); unset($spffc6fe); } }