<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Tellaw\LeadsFactoryBundle\Utils\Chart; class ChartShared { public function getSpecialGraphIndexes() { return $this->specialGraphIndexes; } public function getGraphCount() { return $this->graph_count; } public function setPeriod($sp05d9ea) { $this->period = $sp05d9ea; } public function getPeriod() { return $this->period; } public function setFormType($sp521358) { if (empty($sp521358)) { $this->formType = $this->_getAllFormTypes(); } else { $this->formType = empty($sp521358) || is_array($sp521358) ? $sp521358 : array($sp521358); } } public function getFormType() { return $this->formType; } public function setForm($sp450a62) { $this->form = $sp450a62; } public function getForm() { return $this->form; } protected function _loadLeadsDataByTypes() { $spc9900d = $this->container->get('doctrine')->getManager(); $sp78e4db = array(); foreach ($this->formType as $sp521358) { if (!is_object($sp521358)) { $sp521358 = $this->getContainer()->get('leadsfactory.form_type_repository')->findOneById($sp521358); } $sp177d1c = $spc9900d->createQueryBuilder(); $sp177d1c->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.formType = :form_type_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_type_id', $sp521358->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp177d1c = $this->excludeInternalLeads($sp177d1c); $sp5f127a = $sp177d1c->getQuery()->getResult(); array_unshift($sp5f127a, $sp521358->getName()); $sp78e4db[$sp521358->getName()] = $sp5f127a; } return $sp78e4db; } protected function _loadLeadsDataByFormsType() { $spdfd14e = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $spc9900d = $this->container->get('doctrine')->getManager(); $sp78e4db = array(); $spf03b99 = $this->formType[0]; $sp246ecc = $this->container->get('leadsfactory.form_repository')->findByFormType($spf03b99); foreach ($sp246ecc as $sp450a62) { $sp177d1c = $spc9900d->createQueryBuilder(); $sp177d1c->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp450a62->getId())->setParameter('minDate', $spdfd14e); $sp177d1c = $this->excludeInternalLeads($sp177d1c); $sp5f127a = $sp177d1c->getQuery()->getResult(); array_unshift($sp5f127a, $sp450a62->getName()); $sp78e4db[$sp450a62->getId()] = $sp5f127a; } return $sp78e4db; } protected function _loadLeadsDataByForm() { $spdfd14e = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $spc9900d = $this->container->get('doctrine')->getManager(); $sp78e4db = array(); foreach ($this->form as $sp450a62) { if (!$sp450a62 instanceof Form) { $sp450a62 = $this->container->get('leadsfactory.form_repository')->findOneById($sp450a62); } if ($sp450a62 === null) { continue; } $sp177d1c = $spc9900d->createQueryBuilder(); $sp177d1c->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp450a62->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp177d1c = $this->excludeInternalLeads($sp177d1c); $sp5f127a = $sp177d1c->getQuery()->getResult(); array_unshift($sp5f127a, $sp450a62->getName()); $sp78e4db[$sp450a62->getName()] = $sp5f127a; } return $sp78e4db; } protected function _getRangeMinDate() { $spff9e62 = $this->container->get('lf.utils'); $spbd4950 = $spff9e62->getUserPreferences(); return clone $spbd4950->getDataPeriodMinDate(); } protected function _getRangeMaxDate() { $spff9e62 = $this->container->get('lf.utils'); $spbd4950 = $spff9e62->getUserPreferences(); return $spbd4950->getDataPeriodMaxDate(); } protected function _getAllFormTypes() { $spc9900d = $this->container->get('doctrine')->getManager(); $sp74cce5 = $this->getContainer()->get('leadsfactory.form_type_repository')->findAll(); return $sp74cce5; } protected function _formatChartData($sp78e4db) { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); $sp90d585 = $sp7474c6->format('%R%m'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { $spe1a89a = true; } else { $spe1a89a = false; } $spcfe1c1 = array(); $sp0cc2c5 = array(); $sp48512a = true; foreach ($sp78e4db as $sp116ab7) { $spdffc5f = array_shift($sp116ab7); $spcfe1c1[$spdffc5f] = array(); $sp447f29 = $this->_getRangeMinDate(); if ($spe1a89a) { for ($spfc1854 = 0; $spfc1854 <= $sp654d7d; $spfc1854++) { if ($sp48512a) { $sp0cc2c5[] = (string) $sp447f29->format('d/m/Y'); } $spcfe1c1[$spdffc5f][(string) $sp447f29->format('d/m/Y')] = 0; $sp447f29->add(new \DateInterval('P1D')); } $sp48512a = false; foreach ($sp116ab7 as $sp60f213) { $spcfe1c1[$spdffc5f][(string) $sp60f213['date']] = $sp60f213['n']; } } else { for ($spfc1854 = 0; $spfc1854 < $sp90d585; $spfc1854++) { die; } } } $this->graphTimeRange = $sp0cc2c5; $sp501b0c = array(); $sp962c45 = 0; foreach ($spcfe1c1 as $sp89c202 => $sp116ab7) { $sp501b0c[$sp962c45] = array(); $sp501b0c[$sp962c45][] = $sp89c202; foreach ($sp116ab7 as $spe8a25e) { $sp501b0c[$sp962c45][] = (int) $spe8a25e; } $sp962c45++; } if (Chart::DEBUG_MODE) { var_dump('Formated output'); var_dump($spcfe1c1); var_dump('Google Formated output <chartData>'); var_dump($sp501b0c); var_dump('TimeRange output'); var_dump($sp0cc2c5); } return $sp501b0c; } protected function _addAdditionalGraphs($spb15d7f) { $this->graph_count = count($spb15d7f); $spff9e62 = $this->container->get('lf.utils'); $sp2d4ca1 = $spff9e62->getUserPreferences(); if ($sp2d4ca1->getDataDisplayAverage()) { $spb15d7f[] = $this->_addAverageGraph($spb15d7f); } if ($sp2d4ca1->getDataDisplayTotal()) { $spb15d7f[] = $this->_addTotalGraph($spb15d7f); } $this->setSpecialGraphIndexes($spb15d7f); $this->setNormalGraph($spb15d7f); return $spb15d7f; } protected function _addTotalGraph($spb15d7f) { $sp1796fa = count($spb15d7f[0]); $spf68093 = array('Total'); for ($spbea4f0 = 1; $spbea4f0 < $sp1796fa; $spbea4f0++) { $spca2918 = 0; for ($sp586826 = 0; $sp586826 < $this->graph_count; $sp586826++) { $spca2918 += $spb15d7f[$sp586826][$spbea4f0]; } $spf68093[$spbea4f0] = $spca2918; } return $spf68093; } protected function _addAverageGraph($spb15d7f) { $sp1796fa = count($spb15d7f[0]); $spf74c50 = count($spb15d7f); $spca2918 = 0; $spf3b538 = array('Moyenne'); for ($spbea4f0 = 1; $spbea4f0 < $sp1796fa; $spbea4f0++) { $spca2918 = 0; foreach ($spb15d7f as $spd53cfd) { $spca2918 += $spd53cfd[$spbea4f0]; } $spf3b538[] = $spca2918 / $spf74c50; } return $spf3b538; } public function getTimeRange() { return json_encode($this->graphTimeRange); } protected function _getYearRange() { $spf31c72 = new \DateTime(); $sp8e76e2 = $this->_getRangeMinDate(); $sp382dee = array(); while ($sp8e76e2 <= $spf31c72) { $sp382dee[] = $sp8e76e2->format('M y'); $sp8e76e2->modify('+1 month'); } return $sp382dee; } protected function _getMonthRange() { $spf31c72 = new \DateTime(); $sp8e76e2 = $this->_getRangeMinDate(); $sp382dee = array(); while ($sp8e76e2 <= $spf31c72) { $sp382dee[] = $sp8e76e2->format('d/m'); $sp8e76e2->modify('+1 day'); } return $sp382dee; } public function getChartTitle() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp8e3a99 = 'Lead\\\'s du ' . $spdfd14e->format('d m Y') . ' au ' . $spa0a72a->format('d m Y'); return $sp8e3a99; } protected function _getSqlDateFormat() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { return '%d/%m/%Y'; } else { return '%d/%m/%Y'; } } protected function _getDateFormat() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { return 'md'; } else { return 'Ym'; } } protected function _getDateIncrement() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { return 'day'; } else { return 'month'; } } protected function _getIndexNumber($spec2aa4) { switch ($this->period) { case self::PERIOD_YEAR: return 13; case self::PERIOD_MONTH: $spdfd14e = $this->_getRangeMinDate(); return cal_days_in_month(CAL_GREGORIAN, $spdfd14e->format('m'), $spdfd14e->format('Y')) + 1; default: throw new \Exception('Unknown timeframe'); } } protected function _getSqlGroupByAggregates() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { return array('DAY(l.createdAt) as day', 'MONTH(l.createdAt) as month'); } else { return array('MONTH(l.createdAt) as month', 'YEAR(l.createdAt) as year'); } } protected function _getSqlGroupByClause() { $spdfd14e = $this->_getRangeMinDate(); $spa0a72a = $this->_getRangeMaxDate(); $sp7474c6 = $spdfd14e->diff($spa0a72a); $sp654d7d = $sp7474c6->format('%R%a'); if ($sp654d7d < Chart::ZOOM_SWITCH_RANGE) { return 'day, month'; } else { return 'month, year'; } } public function setSpecialGraphIndexes($spb15d7f) { $sp8d5003 = array(); foreach ($spb15d7f as $sp89c202 => $sp78e4db) { if ($sp89c202 >= $this->graph_count) { $sp8d5003[] = $sp89c202; } } $this->specialGraphIndexes = $sp8d5003; } public function setNormalGraph($spb15d7f) { $sp8d5003 = array(); foreach ($spb15d7f as $sp89c202 => $sp78e4db) { if ($sp89c202 < $this->graph_count) { $sp8d5003[] = $sp78e4db[0]; } } $this->normalGraph = $sp8d5003; } public function getNormalGraph() { return json_encode($this->normalGraph); } public function loadDemoData($spde38fe = null) { echo 'Loading demo data
'; $spc9900d = $this->container->get('doctrine')->getManager(); if ($spde38fe == null) { $sp246ecc = $this->container->get('leadsfactory.form_repository')->findAll(); } else { $sp246ecc = array($this->container->get('leadsfactory.form_repository')->find($spde38fe)); } foreach ($sp246ecc as $sp450a62) { $spb689ab = new \DateTime(); $sp4823d4 = new \DateInterval('P1D'); echo 'Processing form (' . $sp450a62->getId() . ' -> ' . $sp450a62->getName() . ')
'; echo '--> Deleting leads
'; $sp49f6e6 = $spc9900d->getConnection()->prepare('DELETE FROM Leads WHERE form_id = :form_id'); $sp49f6e6->bindValue('form_id', $sp450a62->getId()); $sp49f6e6->execute(); for ($spbea4f0 = 0; $spbea4f0 < 365; $spbea4f0++) { $sp761691 = rand(0, 5); echo '--> Creating Lead DAY : ' . $spbea4f0 . '/365 (form : ' . $sp450a62->getId() . ' / number of leads to create : ' . $sp761691 . ')
'; $spb689ab->sub($sp4823d4); for ($sp586826 = 0; $sp586826 <= $sp761691; $sp586826++) { $sp22badd = new Leads(); $sp22badd->setFirstname('firstname-(' . $sp586826 . '/' . $sp761691 . ')-' . rand()); $sp22badd->setLastname('lastname-' . rand()); $sp22badd->setStatus(1); $sp22badd->setFormType($sp450a62->getFormType()); $sp22badd->setForm($sp450a62); $sp22badd->setCreatedAt($spb689ab); $spc9900d->persist($sp22badd); $spc9900d->flush(); unset($sp22badd); } $this->createPageViewsForDemo($sp761691, $sp450a62, $spb689ab); } } } protected function createPageViewsForDemo($sp761691, $sp450a62, $spb689ab) { $sp11a0db = rand(1, 99); $sped8216 = $sp11a0db / 100 * $sp761691 + $sp761691; for ($sp586826 = 0; $sp586826 <= $sped8216; $sp586826++) { $sp28304a = new Tracking(); $spbd6323 = rand(0, 1); if ($spbd6323) { $sp09b493 = rand(1, 5); $sp09b493 = 'demo_utm_code_' . $sp09b493; $sp28304a->setUtmCampaign($sp09b493); } $sp28304a->setForm($sp450a62); $sp28304a->setCreatedAt($spb689ab); $spc9900d = $this->container->get('doctrine')->getManager(); $spc9900d->persist($sp28304a); $spc9900d->flush(); unset($sp28304a); unset($spbd6323); unset($sp09b493); } unset($sped8216); unset($sp11a0db); } }