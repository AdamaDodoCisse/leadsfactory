<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Tellaw\LeadsFactoryBundle\Utils\Chart; class ChartShared { public function getSpecialGraphIndexes() { return $this->specialGraphIndexes; } public function getGraphCount() { return $this->graph_count; } public function setPeriod($spb9a9f6) { $this->period = $spb9a9f6; } public function getPeriod() { return $this->period; } public function setFormType($sp00fdc1) { if (empty($sp00fdc1)) { $this->formType = $this->_getAllFormTypes(); } else { $this->formType = empty($sp00fdc1) || is_array($sp00fdc1) ? $sp00fdc1 : array($sp00fdc1); } } public function getFormType() { return $this->formType; } public function setForm($sp368158) { $this->form = $sp368158; } public function getForm() { return $this->form; } protected function _loadLeadsDataByTypes() { $sp5c2248 = $this->container->get('doctrine')->getManager(); $spcb1af6 = array(); foreach ($this->formType as $sp00fdc1) { if (!is_object($sp00fdc1)) { $sp00fdc1 = $this->getContainer()->get('leadsfactory.form_type_repository')->findOneById($sp00fdc1); } $sp7f2698 = $sp5c2248->createQueryBuilder(); $sp7f2698->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.formType = :form_type_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_type_id', $sp00fdc1->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp7f2698 = $this->excludeInternalLeads($sp7f2698); $sp24abba = $sp7f2698->getQuery()->getResult(); array_unshift($sp24abba, $sp00fdc1->getName()); $spcb1af6[$sp00fdc1->getName()] = $sp24abba; } return $spcb1af6; } protected function _loadLeadsDataByFormsType() { $sp6a2d20 = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp5c2248 = $this->container->get('doctrine')->getManager(); $spcb1af6 = array(); $sp65b563 = $this->formType[0]; $spb28b81 = $this->container->get('leadsfactory.form_repository')->findByFormType($sp65b563); foreach ($spb28b81 as $sp368158) { $sp7f2698 = $sp5c2248->createQueryBuilder(); $sp7f2698->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp368158->getId())->setParameter('minDate', $sp6a2d20); $sp7f2698 = $this->excludeInternalLeads($sp7f2698); $sp24abba = $sp7f2698->getQuery()->getResult(); array_unshift($sp24abba, $sp368158->getName()); $spcb1af6[$sp368158->getId()] = $sp24abba; } return $spcb1af6; } protected function _loadLeadsDataByForm() { $sp6a2d20 = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp5c2248 = $this->container->get('doctrine')->getManager(); $spcb1af6 = array(); foreach ($this->form as $sp368158) { if (!$sp368158 instanceof Form) { $sp368158 = $this->container->get('leadsfactory.form_repository')->findOneById($sp368158); } if ($sp368158 === null) { continue; } $sp7f2698 = $sp5c2248->createQueryBuilder(); $sp7f2698->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp368158->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp7f2698 = $this->excludeInternalLeads($sp7f2698); $sp24abba = $sp7f2698->getQuery()->getResult(); array_unshift($sp24abba, $sp368158->getName()); $spcb1af6[$sp368158->getName()] = $sp24abba; } return $spcb1af6; } protected function _getRangeMinDate() { $spf2344e = $this->container->get('lf.utils'); $sp07129e = $spf2344e->getUserPreferences(); return clone $sp07129e->getDataPeriodMinDate(); } protected function _getRangeMaxDate() { $spf2344e = $this->container->get('lf.utils'); $sp07129e = $spf2344e->getUserPreferences(); return $sp07129e->getDataPeriodMaxDate(); } protected function _getAllFormTypes() { $sp5c2248 = $this->container->get('doctrine')->getManager(); $sp8e19d0 = $this->getContainer()->get('leadsfactory.form_type_repository')->findAll(); return $sp8e19d0; } protected function _formatChartData($spcb1af6) { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); $sp8565c9 = $sp38a1fe->format('%R%m'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { $sp61347c = true; } else { $sp61347c = false; } $sp388acf = array(); $spf652ab = array(); $spa38790 = true; foreach ($spcb1af6 as $spb9c448) { $spd919b2 = array_shift($spb9c448); $sp388acf[$spd919b2] = array(); $sp119d83 = $this->_getRangeMinDate(); if ($sp61347c) { for ($sp883ebd = 0; $sp883ebd <= $sp9411c0; $sp883ebd++) { if ($spa38790) { $spf652ab[] = (string) $sp119d83->format('d/m/Y'); } $sp388acf[$spd919b2][(string) $sp119d83->format('d/m/Y')] = 0; $sp119d83->add(new \DateInterval('P1D')); } $spa38790 = false; foreach ($spb9c448 as $sp466ee9) { $sp388acf[$spd919b2][(string) $sp466ee9['date']] = $sp466ee9['n']; } } else { for ($sp883ebd = 0; $sp883ebd < $sp8565c9; $sp883ebd++) { die; } } } $this->graphTimeRange = $spf652ab; $sp60cf5d = array(); $spd2d7f7 = 0; foreach ($sp388acf as $spd561ac => $spb9c448) { $sp60cf5d[$spd2d7f7] = array(); $sp60cf5d[$spd2d7f7][] = $spd561ac; foreach ($spb9c448 as $sp76ce00) { $sp60cf5d[$spd2d7f7][] = (int) $sp76ce00; } $spd2d7f7++; } if (Chart::DEBUG_MODE) { var_dump('Formated output'); var_dump($sp388acf); var_dump('Google Formated output <chartData>'); var_dump($sp60cf5d); var_dump('TimeRange output'); var_dump($spf652ab); } return $sp60cf5d; } protected function _addAdditionalGraphs($sp1c857b) { $this->graph_count = count($sp1c857b); $spf2344e = $this->container->get('lf.utils'); $sp4329a8 = $spf2344e->getUserPreferences(); if ($sp4329a8->getDataDisplayAverage()) { $sp1c857b[] = $this->_addAverageGraph($sp1c857b); } if ($sp4329a8->getDataDisplayTotal()) { $sp1c857b[] = $this->_addTotalGraph($sp1c857b); } $this->setSpecialGraphIndexes($sp1c857b); $this->setNormalGraph($sp1c857b); return $sp1c857b; } protected function _addTotalGraph($sp1c857b) { $spb45728 = count($sp1c857b[0]); $sp141e38 = array('Total'); for ($spb16a91 = 1; $spb16a91 < $spb45728; $spb16a91++) { $sp1763c9 = 0; for ($sp78b845 = 0; $sp78b845 < $this->graph_count; $sp78b845++) { $sp1763c9 += $sp1c857b[$sp78b845][$spb16a91]; } $sp141e38[$spb16a91] = $sp1763c9; } return $sp141e38; } protected function _addAverageGraph($sp1c857b) { $spb45728 = count($sp1c857b[0]); $sp6dbba2 = count($sp1c857b); $sp1763c9 = 0; $sp56bf3e = array('Moyenne'); for ($spb16a91 = 1; $spb16a91 < $spb45728; $spb16a91++) { $sp1763c9 = 0; foreach ($sp1c857b as $spb3c3a6) { $sp1763c9 += $spb3c3a6[$spb16a91]; } $sp56bf3e[] = $sp1763c9 / $sp6dbba2; } return $sp56bf3e; } public function getTimeRange() { return json_encode($this->graphTimeRange); } protected function _getYearRange() { $spd5ded4 = new \DateTime(); $spe4d5d1 = $this->_getRangeMinDate(); $spae2930 = array(); while ($spe4d5d1 <= $spd5ded4) { $spae2930[] = $spe4d5d1->format('M y'); $spe4d5d1->modify('+1 month'); } return $spae2930; } protected function _getMonthRange() { $spd5ded4 = new \DateTime(); $spe4d5d1 = $this->_getRangeMinDate(); $spae2930 = array(); while ($spe4d5d1 <= $spd5ded4) { $spae2930[] = $spe4d5d1->format('d/m'); $spe4d5d1->modify('+1 day'); } return $spae2930; } public function getChartTitle() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp124246 = 'Lead\\\'s du ' . $sp6a2d20->format('d m Y') . ' au ' . $spaedc1e->format('d m Y'); return $sp124246; } protected function _getSqlDateFormat() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { return '%d/%m/%Y'; } else { return '%d/%m/%Y'; } } protected function _getDateFormat() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { return 'md'; } else { return 'Ym'; } } protected function _getDateIncrement() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { return 'day'; } else { return 'month'; } } protected function _getIndexNumber($spefc272) { switch ($this->period) { case self::PERIOD_YEAR: return 13; case self::PERIOD_MONTH: $sp6a2d20 = $this->_getRangeMinDate(); return cal_days_in_month(CAL_GREGORIAN, $sp6a2d20->format('m'), $sp6a2d20->format('Y')) + 1; default: throw new \Exception('Unknown timeframe'); } } protected function _getSqlGroupByAggregates() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { return array('DAY(l.createdAt) as day', 'MONTH(l.createdAt) as month'); } else { return array('MONTH(l.createdAt) as month', 'YEAR(l.createdAt) as year'); } } protected function _getSqlGroupByClause() { $sp6a2d20 = $this->_getRangeMinDate(); $spaedc1e = $this->_getRangeMaxDate(); $sp38a1fe = $sp6a2d20->diff($spaedc1e); $sp9411c0 = $sp38a1fe->format('%R%a'); if ($sp9411c0 < Chart::ZOOM_SWITCH_RANGE) { return 'day, month'; } else { return 'month, year'; } } public function setSpecialGraphIndexes($sp1c857b) { $sp537929 = array(); foreach ($sp1c857b as $spd561ac => $spcb1af6) { if ($spd561ac >= $this->graph_count) { $sp537929[] = $spd561ac; } } $this->specialGraphIndexes = $sp537929; } public function setNormalGraph($sp1c857b) { $sp537929 = array(); foreach ($sp1c857b as $spd561ac => $spcb1af6) { if ($spd561ac < $this->graph_count) { $sp537929[] = $spcb1af6[0]; } } $this->normalGraph = $sp537929; } public function getNormalGraph() { return json_encode($this->normalGraph); } public function loadDemoData($spa2b65c = null) { echo 'Loading demo data
'; $sp5c2248 = $this->container->get('doctrine')->getManager(); if ($spa2b65c == null) { $spb28b81 = $this->container->get('leadsfactory.form_repository')->findAll(); } else { $spb28b81 = array($this->container->get('leadsfactory.form_repository')->find($spa2b65c)); } foreach ($spb28b81 as $sp368158) { $spb1db75 = new \DateTime(); $sp74ecfe = new \DateInterval('P1D'); echo 'Processing form (' . $sp368158->getId() . ' -> ' . $sp368158->getName() . ')
'; echo '--> Deleting leads
'; $spcfe3cf = $sp5c2248->getConnection()->prepare('DELETE FROM Leads WHERE form_id = :form_id'); $spcfe3cf->bindValue('form_id', $sp368158->getId()); $spcfe3cf->execute(); for ($spb16a91 = 0; $spb16a91 < 365; $spb16a91++) { $sp715bdc = rand(0, 5); echo '--> Creating Lead DAY : ' . $spb16a91 . '/365 (form : ' . $sp368158->getId() . ' / number of leads to create : ' . $sp715bdc . ')
'; $spb1db75->sub($sp74ecfe); for ($sp78b845 = 0; $sp78b845 <= $sp715bdc; $sp78b845++) { $spd976db = new Leads(); $spd976db->setFirstname('firstname-(' . $sp78b845 . '/' . $sp715bdc . ')-' . rand()); $spd976db->setLastname('lastname-' . rand()); $spd976db->setStatus(1); $spd976db->setFormType($sp368158->getFormType()); $spd976db->setForm($sp368158); $spd976db->setCreatedAt($spb1db75); $sp5c2248->persist($spd976db); $sp5c2248->flush(); unset($spd976db); } $this->createPageViewsForDemo($sp715bdc, $sp368158, $spb1db75); } } } protected function createPageViewsForDemo($sp715bdc, $sp368158, $spb1db75) { $sp81abfe = rand(1, 99); $spf995ee = $sp81abfe / 100 * $sp715bdc + $sp715bdc; for ($sp78b845 = 0; $sp78b845 <= $spf995ee; $sp78b845++) { $sp47d0ce = new Tracking(); $spcc7d97 = rand(0, 1); if ($spcc7d97) { $sp97bb00 = rand(1, 5); $sp97bb00 = 'demo_utm_code_' . $sp97bb00; $sp47d0ce->setUtmCampaign($sp97bb00); } $sp47d0ce->setForm($sp368158); $sp47d0ce->setCreatedAt($spb1db75); $sp5c2248 = $this->container->get('doctrine')->getManager(); $sp5c2248->persist($sp47d0ce); $sp5c2248->flush(); unset($sp47d0ce); unset($spcc7d97); unset($sp97bb00); } unset($spf995ee); unset($sp81abfe); } }