<?php
namespace Tellaw\LeadsFactoryBundle\Shared; use Tellaw\LeadsFactoryBundle\Utils\Chart; class ChartShared { public function getSpecialGraphIndexes() { return $this->specialGraphIndexes; } public function getGraphCount() { return $this->graph_count; } public function setPeriod($spa9dd20) { $this->period = $spa9dd20; } public function getPeriod() { return $this->period; } public function setFormType($spd53610) { if (empty($spd53610)) { $this->formType = $this->_getAllFormTypes(); } else { $this->formType = empty($spd53610) || is_array($spd53610) ? $spd53610 : array($spd53610); } } public function getFormType() { return $this->formType; } public function setForm($sp9bb2c9) { $this->form = $sp9bb2c9; } public function getForm() { return $this->form; } protected function _loadLeadsDataByTypes() { $sp3acc9e = $this->container->get('doctrine')->getManager(); $sp7155eb = array(); foreach ($this->formType as $spd53610) { if (!is_object($spd53610)) { $spd53610 = $this->getContainer()->get('leadsfactory.form_type_repository')->findOneById($spd53610); } $sp28df4f = $sp3acc9e->createQueryBuilder(); $sp28df4f->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.formType = :form_type_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_type_id', $spd53610->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp28df4f = $this->excludeInternalLeads($sp28df4f); $sp4cbf19 = $sp28df4f->getQuery()->getResult(); array_unshift($sp4cbf19, $spd53610->getName()); $sp7155eb[$spd53610->getName()] = $sp4cbf19; } return $sp7155eb; } protected function _loadLeadsDataByFormsType() { $sp7be3cf = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp3acc9e = $this->container->get('doctrine')->getManager(); $sp7155eb = array(); $sp2c9812 = $this->formType[0]; $spc931e9 = $this->container->get('leadsfactory.form_repository')->findByFormType($sp2c9812); foreach ($spc931e9 as $sp9bb2c9) { $sp28df4f = $sp3acc9e->createQueryBuilder(); $sp28df4f->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp9bb2c9->getId())->setParameter('minDate', $sp7be3cf); $sp28df4f = $this->excludeInternalLeads($sp28df4f); $sp4cbf19 = $sp28df4f->getQuery()->getResult(); array_unshift($sp4cbf19, $sp9bb2c9->getName()); $sp7155eb[$sp9bb2c9->getId()] = $sp4cbf19; } return $sp7155eb; } protected function _loadLeadsDataByForm() { $sp7be3cf = $this->_getRangeMinDate()->format('Y-m-d H:i:s'); $sp3acc9e = $this->container->get('doctrine')->getManager(); $sp7155eb = array(); foreach ($this->form as $sp9bb2c9) { if (!$sp9bb2c9 instanceof Form) { $sp9bb2c9 = $this->container->get('leadsfactory.form_repository')->findOneById($sp9bb2c9); } if ($sp9bb2c9 === null) { continue; } $sp28df4f = $sp3acc9e->createQueryBuilder(); $sp28df4f->select(array_merge(array('DATE_FORMAT(l.createdAt,:format) as date', 'count(l) as n'), $this->_getSqlGroupByAggregates()))->from('TellawLeadsFactoryBundle:Leads', 'l')->where('l.form = :form_id')->andWhere('l.createdAt >= :minDate')->andWhere('l.createdAt <= :maxDate')->groupBy($this->_getSqlGroupByClause())->setParameter('format', $this->_getSqlDateFormat())->setParameter('form_id', $sp9bb2c9->getId())->setParameter('minDate', $this->_getRangeMinDate()->format('Y-m-d'))->setParameter('maxDate', $this->_getRangeMaxDate()->format('Y-m-d')); $sp28df4f = $this->excludeInternalLeads($sp28df4f); $sp4cbf19 = $sp28df4f->getQuery()->getResult(); array_unshift($sp4cbf19, $sp9bb2c9->getName()); $sp7155eb[$sp9bb2c9->getName()] = $sp4cbf19; } return $sp7155eb; } protected function _getRangeMinDate() { $sp5d11cb = $this->container->get('lf.utils'); $sp83b17e = $sp5d11cb->getUserPreferences(); return clone $sp83b17e->getDataPeriodMinDate(); } protected function _getRangeMaxDate() { $sp5d11cb = $this->container->get('lf.utils'); $sp83b17e = $sp5d11cb->getUserPreferences(); return $sp83b17e->getDataPeriodMaxDate(); } protected function _getAllFormTypes() { $sp3acc9e = $this->container->get('doctrine')->getManager(); $sp48b004 = $this->getContainer()->get('leadsfactory.form_type_repository')->findAll(); return $sp48b004; } protected function _formatChartData($sp7155eb) { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); $sp488cd3 = $sp2cadb9->format('%R%m'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { $sp1f9cf0 = true; } else { $sp1f9cf0 = false; } $spc004ea = array(); $sp4a2447 = array(); $sp5ddcfc = true; foreach ($sp7155eb as $sp419051) { $spc82f13 = array_shift($sp419051); $spc004ea[$spc82f13] = array(); $spe09241 = $this->_getRangeMinDate(); if ($sp1f9cf0) { for ($sp246286 = 0; $sp246286 <= $sp24059f; $sp246286++) { if ($sp5ddcfc) { $sp4a2447[] = (string) $spe09241->format('d/m/Y'); } $spc004ea[$spc82f13][(string) $spe09241->format('d/m/Y')] = 0; $spe09241->add(new \DateInterval('P1D')); } $sp5ddcfc = false; foreach ($sp419051 as $spa538b7) { $spc004ea[$spc82f13][(string) $spa538b7['date']] = $spa538b7['n']; } } else { for ($sp246286 = 0; $sp246286 < $sp488cd3; $sp246286++) { die; } } } $this->graphTimeRange = $sp4a2447; $sp4e7cdd = array(); $sp0a0e52 = 0; foreach ($spc004ea as $sp5b6186 => $sp419051) { $sp4e7cdd[$sp0a0e52] = array(); $sp4e7cdd[$sp0a0e52][] = $sp5b6186; foreach ($sp419051 as $spf765ef) { $sp4e7cdd[$sp0a0e52][] = (int) $spf765ef; } $sp0a0e52++; } if (Chart::DEBUG_MODE) { var_dump('Formated output'); var_dump($spc004ea); var_dump('Google Formated output <chartData>'); var_dump($sp4e7cdd); var_dump('TimeRange output'); var_dump($sp4a2447); } return $sp4e7cdd; } protected function _addAdditionalGraphs($sp3b4d50) { $this->graph_count = count($sp3b4d50); $sp5d11cb = $this->container->get('lf.utils'); $sp83cacc = $sp5d11cb->getUserPreferences(); if ($sp83cacc->getDataDisplayAverage()) { $sp3b4d50[] = $this->_addAverageGraph($sp3b4d50); } if ($sp83cacc->getDataDisplayTotal()) { $sp3b4d50[] = $this->_addTotalGraph($sp3b4d50); } $this->setSpecialGraphIndexes($sp3b4d50); $this->setNormalGraph($sp3b4d50); return $sp3b4d50; } protected function _addTotalGraph($sp3b4d50) { $sp9255ed = count($sp3b4d50[0]); $sp3a4aa9 = array('Total'); for ($spb3aad3 = 1; $spb3aad3 < $sp9255ed; $spb3aad3++) { $spd0f2d1 = 0; for ($spec0fc1 = 0; $spec0fc1 < $this->graph_count; $spec0fc1++) { $spd0f2d1 += $sp3b4d50[$spec0fc1][$spb3aad3]; } $sp3a4aa9[$spb3aad3] = $spd0f2d1; } return $sp3a4aa9; } protected function _addAverageGraph($sp3b4d50) { $sp9255ed = count($sp3b4d50[0]); $spf4834f = count($sp3b4d50); $spd0f2d1 = 0; $sp796d61 = array('Moyenne'); for ($spb3aad3 = 1; $spb3aad3 < $sp9255ed; $spb3aad3++) { $spd0f2d1 = 0; foreach ($sp3b4d50 as $sp79eadb) { $spd0f2d1 += $sp79eadb[$spb3aad3]; } $sp796d61[] = $spd0f2d1 / $spf4834f; } return $sp796d61; } public function getTimeRange() { return json_encode($this->graphTimeRange); } protected function _getYearRange() { $spc96ac7 = new \DateTime(); $sp195eda = $this->_getRangeMinDate(); $sp03c869 = array(); while ($sp195eda <= $spc96ac7) { $sp03c869[] = $sp195eda->format('M y'); $sp195eda->modify('+1 month'); } return $sp03c869; } protected function _getMonthRange() { $spc96ac7 = new \DateTime(); $sp195eda = $this->_getRangeMinDate(); $sp03c869 = array(); while ($sp195eda <= $spc96ac7) { $sp03c869[] = $sp195eda->format('d/m'); $sp195eda->modify('+1 day'); } return $sp03c869; } public function getChartTitle() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp6c053c = 'Lead\\\'s du ' . $sp7be3cf->format('d m Y') . ' au ' . $spf1cbdf->format('d m Y'); return $sp6c053c; } protected function _getSqlDateFormat() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { return '%d/%m/%Y'; } else { return '%d/%m/%Y'; } } protected function _getDateFormat() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { return 'md'; } else { return 'Ym'; } } protected function _getDateIncrement() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { return 'day'; } else { return 'month'; } } protected function _getIndexNumber($sp573928) { switch ($this->period) { case self::PERIOD_YEAR: return 13; case self::PERIOD_MONTH: $sp7be3cf = $this->_getRangeMinDate(); return cal_days_in_month(CAL_GREGORIAN, $sp7be3cf->format('m'), $sp7be3cf->format('Y')) + 1; default: throw new \Exception('Unknown timeframe'); } } protected function _getSqlGroupByAggregates() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { return array('DAY(l.createdAt) as day', 'MONTH(l.createdAt) as month'); } else { return array('MONTH(l.createdAt) as month', 'YEAR(l.createdAt) as year'); } } protected function _getSqlGroupByClause() { $sp7be3cf = $this->_getRangeMinDate(); $spf1cbdf = $this->_getRangeMaxDate(); $sp2cadb9 = $sp7be3cf->diff($spf1cbdf); $sp24059f = $sp2cadb9->format('%R%a'); if ($sp24059f < Chart::ZOOM_SWITCH_RANGE) { return 'day, month'; } else { return 'month, year'; } } public function setSpecialGraphIndexes($sp3b4d50) { $spde174f = array(); foreach ($sp3b4d50 as $sp5b6186 => $sp7155eb) { if ($sp5b6186 >= $this->graph_count) { $spde174f[] = $sp5b6186; } } $this->specialGraphIndexes = $spde174f; } public function setNormalGraph($sp3b4d50) { $spde174f = array(); foreach ($sp3b4d50 as $sp5b6186 => $sp7155eb) { if ($sp5b6186 < $this->graph_count) { $spde174f[] = $sp7155eb[0]; } } $this->normalGraph = $spde174f; } public function getNormalGraph() { return json_encode($this->normalGraph); } public function loadDemoData($sp41303f = null) { echo 'Loading demo data
'; $sp3acc9e = $this->container->get('doctrine')->getManager(); if ($sp41303f == null) { $spc931e9 = $this->container->get('leadsfactory.form_repository')->findAll(); } else { $spc931e9 = array($this->container->get('leadsfactory.form_repository')->find($sp41303f)); } foreach ($spc931e9 as $sp9bb2c9) { $spaf2148 = new \DateTime(); $sp2f3bf0 = new \DateInterval('P1D'); echo 'Processing form (' . $sp9bb2c9->getId() . ' -> ' . $sp9bb2c9->getName() . ')
'; echo '--> Deleting leads
'; $sp297eeb = $sp3acc9e->getConnection()->prepare('DELETE FROM Leads WHERE form_id = :form_id'); $sp297eeb->bindValue('form_id', $sp9bb2c9->getId()); $sp297eeb->execute(); for ($spb3aad3 = 0; $spb3aad3 < 365; $spb3aad3++) { $sp69e2be = rand(0, 5); echo '--> Creating Lead DAY : ' . $spb3aad3 . '/365 (form : ' . $sp9bb2c9->getId() . ' / number of leads to create : ' . $sp69e2be . ')
'; $spaf2148->sub($sp2f3bf0); for ($spec0fc1 = 0; $spec0fc1 <= $sp69e2be; $spec0fc1++) { $sp14d90c = new Leads(); $sp14d90c->setFirstname('firstname-(' . $spec0fc1 . '/' . $sp69e2be . ')-' . rand()); $sp14d90c->setLastname('lastname-' . rand()); $sp14d90c->setStatus(1); $sp14d90c->setFormType($sp9bb2c9->getFormType()); $sp14d90c->setForm($sp9bb2c9); $sp14d90c->setCreatedAt($spaf2148); $sp3acc9e->persist($sp14d90c); $sp3acc9e->flush(); unset($sp14d90c); } $this->createPageViewsForDemo($sp69e2be, $sp9bb2c9, $spaf2148); } } } protected function createPageViewsForDemo($sp69e2be, $sp9bb2c9, $spaf2148) { $spffd3d6 = rand(1, 99); $sp9f7474 = $spffd3d6 / 100 * $sp69e2be + $sp69e2be; for ($spec0fc1 = 0; $spec0fc1 <= $sp9f7474; $spec0fc1++) { $sp973b90 = new Tracking(); $sp6abd2f = rand(0, 1); if ($sp6abd2f) { $spe334f0 = rand(1, 5); $spe334f0 = 'demo_utm_code_' . $spe334f0; $sp973b90->setUtmCampaign($spe334f0); } $sp973b90->setForm($sp9bb2c9); $sp973b90->setCreatedAt($spaf2148); $sp3acc9e = $this->container->get('doctrine')->getManager(); $sp3acc9e->persist($sp973b90); $sp3acc9e->flush(); unset($sp973b90); unset($sp6abd2f); unset($spe334f0); } unset($sp9f7474); unset($spffd3d6); } }